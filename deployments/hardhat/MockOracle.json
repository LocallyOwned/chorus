{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "NewValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tip",
          "type": "uint256"
        }
      ],
      "name": "TipAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addTip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "disputeValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "faucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getNewValueCountbyRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTimestampbyRequestIDandIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isDisputed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "isInDispute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "retrieveData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "submitValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "timestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "values",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ba0ed2d996f4f40cb7020e9f5f048a626e3f32c1bb3dd919b626e50c8b24ebd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1532322",
    "logsBloom": "0x
    "blockHash": "0xd488e78cc5066fc7a528c8aec9e20cd89d3626b7db2c6f1ca0f6ac139dc95fda",
    "transactionHash": "0x4ba0ed2d996f4f40cb7020e9f5f048a626e3f32c1bb3dd919b626e50c8b24ebd",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1532322",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cd84a9df4882c46e5d0b7274bee0550e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"NewValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tip\",\"type\":\"uint256\"}],\"name\":\"TipAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addTip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"disputeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"faucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isDisputed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isInDispute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTip(uint256,uint256)\":{\"details\":\"Adds a tip to a given request Id.\",\"params\":{\"_amount\":\"is the amount of tips\",\"_requestId\":\"is the requestId to look up\"}},\"allowance(address,address)\":{\"details\":\"Retruns the amount that an address is alowed to spend of behalf of other\",\"params\":{\"owner\":\"The address which owns the tokens\",\"spender\":\"The address that will use the tokens\"},\"returns\":{\"_0\":\"uint256 Indicating the amount of allowed tokens\"}},\"approve(address,uint256)\":{\"details\":\"Approves  amount that an address is alowed to spend of behalf of other\",\"params\":{\"amount\":\"The amount that msg.sender is allowing spender to use\",\"spender\":\"The address which user the tokens\"},\"returns\":{\"_0\":\"bool If the transaction succeeded\"}},\"balanceOf(address)\":{\"details\":\"Returns the balance of a given user.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Helper function to increase the allowance\"},\"disputeValue(uint256,uint256)\":{\"details\":\"A mock function to create a dispute\",\"params\":{\"_requestId\":\"The tellorId to be disputed\",\"_timestamp\":\"the timestamp that indentifies for the value\"}},\"faucet(address)\":{\"details\":\"Public function to mint tokens for the passed address\",\"params\":{\"user\":\"The address which will own the tokens\"}},\"getNewValueCountbyRequestId(uint256)\":{\"details\":\"Counts the number of values that have been submited for the request\",\"params\":{\"_requestId\":\"the requestId to look up\"},\"returns\":{\"_0\":\"uint count of the number of values received for the requestId\"}},\"getTimestampbyRequestIDandIndex(uint256,uint256)\":{\"details\":\"Gets the timestamp for the value based on their index\",\"params\":{\"_requestId\":\"is the requestId to look up\",\"index\":\"is the value index to look up\"},\"returns\":{\"_0\":\"uint timestamp\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Helper function to increase the allowance\"},\"isInDispute(uint256,uint256)\":{\"details\":\"Gets if the mined value for the specified requestId/_timestamp is currently under dispute\",\"params\":{\"_requestId\":\"to looku p\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"returns\":{\"_0\":\"bool true if requestId/timestamp is under dispute\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"retrieveData(uint256,uint256)\":{\"details\":\"Retreive value from oracle based on requestId/timestamp\",\"params\":{\"_requestId\":\"being requested\",\"_timestamp\":\"to retreive data/value from\"},\"returns\":{\"_0\":\"uint value for requestId/timestamp submitted\"}},\"submitValue(uint256,uint256)\":{\"details\":\"A mock function to submit a value to be read withoun miners needed\",\"params\":{\"_requestId\":\"The tellorId to associate the value to\",\"_value\":\"the value for the requestId\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the total supply of the token.\"},\"transfer(address,uint256)\":{\"details\":\"Transfer tokens from user to another\",\"params\":{\"amount\":\"The amount of tokens, including decimals, to transfer\",\"recipient\":\"The destination address\"},\"returns\":{\"_0\":\"bool If the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from user to another\",\"params\":{\"amount\":\"The amount of tokens, including decimals, to transfer\",\"recipient\":\"The destination address\",\"sender\":\"The address which owns the tokens\"},\"returns\":{\"_0\":\"bool If the transfer succeeded\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockOracle.sol\":\"MockOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"./interfaces/ITellor.sol\\\";\\n\\n/** \\n @author Tellor Inc.\\n @title OracleGetter\\n @dev a way to access Tellor variables\\n**/\\ncontract OracleGetter {\\n    ITellor private tellor;\\n\\n    /**\\n     * @dev Constructor for the oracle getters\\n     * @param _tellor the tellor address\\n     */\\n    constructor(address payable _tellor) {\\n        tellor = ITellor(_tellor);\\n    }\\n    \\n    /**\\n     * @dev Allows the user to get the first value for the requestId before the specified timestamp\\n     * @param _requestId is the requestId to look up the value for\\n     * @param _timestamp before which to search for first verified value\\n     * @return _ifRetrieve bool true if it is able to retreive a value, the value, and the value's timestamp\\n     * @return _value the value retrieved\\n     * @return _timestampRetrieved the value's timestamp\\n     */\\n    function _getDataBefore(uint256 _requestId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (\\n            bool _ifRetrieve,\\n            uint256 _value,\\n            uint256 _timestampRetrieved\\n        )\\n    {\\n        (bool _found, uint256 _index) =\\n            _getIndexForDataBefore(_requestId, _timestamp);\\n        if (!_found) return (false, 0, 0);\\n        uint256 _time =\\n            tellor.getTimestampbyRequestIDandIndex(_requestId, _index);\\n        _value = tellor.retrieveData(_requestId, _time);\\n        //If value is diputed it'll return zero\\n        if (_value > 0) return (true, _value, _time);\\n        return (false, 0, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to get the index of the Tellor data\\n     * @param _requestId requestID for Tellor data feed\\n     * @param _timestamp timestamp of request\\n     */\\n    function _getIndexForDataBefore(uint256 _requestId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        uint256 _count = tellor.getNewValueCountbyRequestId(_requestId);\\n        if (_count > 0) {\\n            uint256 _middle;\\n            uint256 _start = 0;\\n            uint256 _end = _count - 1;\\n            uint256 _time;\\n            //Checking Boundaries to short-circuit the algorithm\\n            _time = tellor.getTimestampbyRequestIDandIndex(_requestId, _start);\\n            if (_time >= _timestamp) return (false, 0);\\n            _time = tellor.getTimestampbyRequestIDandIndex(_requestId, _end);\\n            if (_time < _timestamp) return (true, _end);\\n            //Since the value is within our boundaries, do a binary search\\n            while (true) {\\n                _middle = (_end - _start) / 2 + 1 + _start;\\n                _time = tellor.getTimestampbyRequestIDandIndex(\\n                    _requestId,\\n                    _middle\\n                );\\n                if (_time < _timestamp) {\\n                    //get imeadiate next value\\n                    uint256 _nextTime =\\n                        tellor.getTimestampbyRequestIDandIndex(\\n                            _requestId,\\n                            _middle + 1\\n                        );\\n                    if (_nextTime >= _timestamp) {\\n                        return (true, _middle);//_time is correct\\n                    } else {\\n                        //look from middle + 1(next value) to end\\n                        _start = _middle + 1;\\n                    }\\n                } else {\\n                    uint256 _prevTime =\\n                        tellor.getTimestampbyRequestIDandIndex(\\n                            _requestId,\\n                            _middle - 1\\n                        );\\n                    if (_prevTime < _timestamp) {\\n                        // _prevtime is correct\\n                        return (true, _middle - 1);\\n                    } else {\\n                        //look from start to middle -1(prev value)\\n                        _end = _middle - 1;\\n                    }\\n                }\\n            }\\n        }\\n        return (false, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x677e548b978b8bff40dfec8c3d21dbffb31d517ee56d59393c3c455ad1eb416c\",\"license\":\"MIT\"},\"contracts/interfaces/ITellor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/** \\n @author Tellor Inc.\\n @title ITellor\\n @dev  This contract holds the interface for all Tellor functions\\n**/\\ninterface ITellor {\\n    /*Events*/\\n    event NewTellorAddress(address _newTellor);\\n    event NewDispute(\\n        uint256 indexed _disputeId,\\n        uint256 indexed _requestId,\\n        uint256 _timestamp,\\n        address _miner\\n    );\\n    event Voted(\\n        uint256 indexed _disputeID,\\n        bool _position,\\n        address indexed _voter,\\n        uint256 indexed _voteWeight\\n    );\\n    event DisputeVoteTallied(\\n        uint256 indexed _disputeID,\\n        int256 _result,\\n        address indexed _reportedMiner,\\n        address _reportingParty,\\n        bool _passed\\n    );\\n    event TipAdded(\\n        address indexed _sender,\\n        uint256 indexed _requestId,\\n        uint256 _tip,\\n        uint256 _totalTips\\n    );\\n    event NewChallenge(\\n        bytes32 indexed _currentChallenge,\\n        uint256[5] _currentRequestId,\\n        uint256 _difficulty,\\n        uint256 _totalTips\\n    );\\n    event NewValue(\\n        uint256[5] _requestId,\\n        uint256 _time,\\n        uint256[5] _value,\\n        uint256 _totalTips,\\n        bytes32 indexed _currentChallenge\\n    );\\n    event NonceSubmitted(\\n        address indexed _miner,\\n        string _nonce,\\n        uint256[5] _requestId,\\n        uint256[5] _value,\\n        bytes32 indexed _currentChallenge,\\n        uint256 _slot\\n    );\\n    event NewStake(address indexed _sender); //Emits upon new staker\\n    event StakeWithdrawn(address indexed _sender); //Emits when a staker is now no longer staked\\n    event StakeWithdrawRequested(address indexed _sender); //Emits when a staker begins the 7 day withdraw period\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); //ERC20 Transfer Event\\n\\n    /*Functions -- master*/\\n    function changeDeity(address _newDeity) external;\\n\\n    function changeOwner(address _newOwner) external;\\n\\n    function changeTellorContract(address _tellorContract) external;\\n\\n    /*Functions -- Extension*/\\n    function depositStake() external;\\n\\n    function requestStakingWithdraw() external;\\n\\n    function tallyVotes(uint256 _disputeId) external;\\n\\n    function updateMinDisputeFee() external;\\n\\n    function updateTellor(uint256 _disputeId) external;\\n\\n    function withdrawStake() external;\\n\\n    /*Functions -- Tellor*/\\n    function addTip(uint256 _requestId, uint256 _tip) external;\\n\\n    function changeExtension(address _extension) external;\\n\\n    function changeMigrator(address _migrator) external;\\n\\n    function migrate() external;\\n\\n    function migrateFor(\\n        address _destination,\\n        uint256 _amount,\\n        bool _bypass\\n    ) external;\\n\\n    function migrateForBatch(\\n        address[] calldata _destination,\\n        uint256[] calldata _amount\\n    ) external;\\n\\n    function migrateFrom(\\n        address _origin,\\n        address _destination,\\n        uint256 _amount,\\n        bool _bypass\\n    ) external;\\n\\n    function migrateFromBatch(\\n        address[] calldata _origin,\\n        address[] calldata _destination,\\n        uint256[] calldata _amount\\n    ) external;\\n\\n    function submitMiningSolution(\\n        string calldata _nonce,\\n        uint256[5] calldata _requestIds,\\n        uint256[5] calldata _values\\n    ) external;\\n\\n    /*Functions -- TellorGetters*/\\n    function didMine(bytes32 _challenge, address _miner)\\n        external\\n        view\\n        returns (bool);\\n\\n    function didVote(uint256 _disputeId, address _address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getAddressVars(bytes32 _data) external view returns (address);\\n\\n    function getAllDisputeVars(uint256 _disputeId)\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            bool,\\n            bool,\\n            bool,\\n            address,\\n            address,\\n            address,\\n            uint256[9] memory,\\n            int256\\n        );\\n\\n    function getDisputeIdByDisputeHash(bytes32 _hash)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getDisputeUintVars(uint256 _disputeId, bytes32 _data)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLastNewValue() external view returns (uint256, bool);\\n\\n    function getLastNewValueById(uint256 _requestId)\\n        external\\n        view\\n        returns (uint256, bool);\\n\\n    function getMinedBlockNum(uint256 _requestId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getMinersByRequestIdAndTimestamp(\\n        uint256 _requestId,\\n        uint256 _timestamp\\n    ) external view returns (address[5] memory);\\n\\n    function getNewValueCountbyRequestId(uint256 _requestId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRequestIdByRequestQIndex(uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRequestIdByTimestamp(uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRequestQ() external view returns (uint256[51] memory);\\n\\n    function getRequestUintVars(uint256 _requestId, bytes32 _data)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRequestVars(uint256 _requestId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getStakerInfo(address _staker)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getSubmissionsByTimestamp(uint256 _requestId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256[5] memory);\\n\\n    function getTimestampbyRequestIDandIndex(uint256 _requestID, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUintVar(bytes32 _data) external view returns (uint256);\\n\\n    function isInDispute(uint256 _requestId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bool);\\n\\n    function retrieveData(uint256 _requestId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function getNewCurrentVariables()\\n        external\\n        view\\n        returns (\\n            bytes32 _challenge,\\n            uint256[5] memory _requestIds,\\n            uint256 _difficulty,\\n            uint256 _tip\\n        );\\n\\n    function getNewVariablesOnDeck()\\n        external\\n        view\\n        returns (uint256[5] memory idsOnDeck, uint256[5] memory tipsOnDeck);\\n\\n    function getTopRequestIDs()\\n        external\\n        view\\n        returns (uint256[5] memory _requestIds);\\n\\n    /*Functions -- TellorStake*/\\n    function beginDispute(\\n        uint256 _requestId,\\n        uint256 _timestamp,\\n        uint256 _minerIndex\\n    ) external;\\n\\n    function proposeFork(address _propNewTellorAddress) external;\\n\\n    function unlockDisputeFee(uint256 _disputeId) external;\\n\\n    function verify() external returns (uint256);\\n\\n    function vote(uint256 _disputeId, bool _supportsDispute) external;\\n\\n    /*Functions -- TellorTransfer*/\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function allowance(address _user, address _spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allowedToTrade(address _user, uint256 _amount)\\n        external\\n        view\\n        returns (bool);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function balanceOfAt(address _user, uint256 _blockNumber)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transfer(address _to, uint256 _amount) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    //Test Functions\\n    function theLazyCoon(address _address, uint256 _amount) external;\\n\\n    function testSubmitMiningSolution(\\n        string calldata _nonce,\\n        uint256[5] calldata _requestId,\\n        uint256[5] calldata _value\\n    ) external;\\n\\n    function manuallySetDifficulty(uint256 _diff) external;\\n\\n    function testgetMax5(uint256[51] memory requests)\\n        external\\n        view\\n        returns (uint256[5] memory _max, uint256[5] memory _index);\\n}\\n\",\"keccak256\":\"0x4b63ef3eab15c2c189df4a76bb9f8e7e0822bbd22b7fa666470a0c41bb5e8d35\",\"license\":\"MIT\"},\"contracts/test/MockOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"../OracleGetter.sol\\\";\\n\\ncontract MockOracle {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event TipAdded(\\n        address indexed _sender,\\n        uint256 indexed _requestId,\\n        uint256 _tip\\n    );\\n    event NewValue(uint256 _requestId, uint256 _time, uint256 _value);\\n\\n    mapping(uint256 => mapping(uint256 => uint256)) public values; //requestId -> timestamp -> value\\n    mapping(uint256 => mapping(uint256 => bool)) public isDisputed; //requestId -> timestamp -> value\\n    mapping(uint256 => uint256[]) public timestamps;\\n    mapping(address => uint256) public balances;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor() {\\n        _name = \\\"Tribute\\\";\\n        _symbol = \\\"TRB\\\";\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Public function to mint tokens for the passed address\\n     * @param user The address which will own the tokens\\n     *\\n     */\\n    function faucet(address user) external {\\n        _mint(user, 1000 ether);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the total supply of the token.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the balance of a given user.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from user to another\\n     * @param recipient The destination address\\n     * @param amount The amount of tokens, including decimals, to transfer\\n     * @return bool If the transfer succeeded\\n     *\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Retruns the amount that an address is alowed to spend of behalf of other\\n     * @param owner The address which owns the tokens\\n     * @param spender The address that will use the tokens\\n     * @return uint256 Indicating the amount of allowed tokens\\n     *\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev Approves  amount that an address is alowed to spend of behalf of other\\n     * @param spender The address which user the tokens\\n     * @param amount The amount that msg.sender is allowing spender to use\\n     * @return bool If the transaction succeeded\\n     *\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from user to another\\n     * @param sender The address which owns the tokens\\n     * @param recipient The destination address\\n     * @param amount The amount of tokens, including decimals, to transfer\\n     * @return bool If the transfer succeeded\\n     *\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Helper function to increase the allowance\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Helper function to increase the allowance\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] - subtractedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Internal function to perform token transfer\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Internal function to create new tokens for the user\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply + amount;\\n        _balances[account] = _balances[account] + amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn tokens for the user\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account] - amount;\\n        _totalSupply = _totalSupply - amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Internal function to approve tokens for the user\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev A mock function to submit a value to be read withoun miners needed\\n     * @param _requestId The tellorId to associate the value to\\n     * @param _value the value for the requestId\\n     */\\n    function submitValue(uint256 _requestId, uint256 _value) external {\\n        values[_requestId][block.timestamp] = _value;\\n        timestamps[_requestId].push(block.timestamp);\\n        emit NewValue(_requestId, block.timestamp, _value);\\n    }\\n\\n    /**\\n     * @dev A mock function to create a dispute\\n     * @param _requestId The tellorId to be disputed\\n     * @param _timestamp the timestamp that indentifies for the value\\n     */\\n    function disputeValue(uint256 _requestId, uint256 _timestamp) external {\\n        values[_requestId][_timestamp] = 0;\\n        isDisputed[_requestId][_timestamp] = true;\\n    }\\n\\n    /**\\n     * @dev Retreive value from oracle based on requestId/timestamp\\n     * @param _requestId being requested\\n     * @param _timestamp to retreive data/value from\\n     * @return uint value for requestId/timestamp submitted\\n     */\\n    function retrieveData(uint256 _requestId, uint256 _timestamp)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return values[_requestId][_timestamp];\\n    }\\n\\n    /**\\n     * @dev Gets if the mined value for the specified requestId/_timestamp is currently under dispute\\n     * @param _requestId to looku p\\n     * @param _timestamp is the timestamp to look up miners for\\n     * @return bool true if requestId/timestamp is under dispute\\n     */\\n    function isInDispute(uint256 _requestId, uint256 _timestamp)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return isDisputed[_requestId][_timestamp];\\n    }\\n\\n    /**\\n     * @dev Counts the number of values that have been submited for the request\\n     * @param _requestId the requestId to look up\\n     * @return uint count of the number of values received for the requestId\\n     */\\n    function getNewValueCountbyRequestId(uint256 _requestId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return timestamps[_requestId].length;\\n    }\\n\\n    /**\\n     * @dev Gets the timestamp for the value based on their index\\n     * @param _requestId is the requestId to look up\\n     * @param index is the value index to look up\\n     * @return uint timestamp\\n     */\\n    function getTimestampbyRequestIDandIndex(uint256 _requestId, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 len = timestamps[_requestId].length;\\n        if (len == 0 || len <= index) return 0;\\n        return timestamps[_requestId][index];\\n    }\\n\\n    /**\\n     * @dev Adds a tip to a given request Id.\\n     * @param _requestId is the requestId to look up\\n     * @param _amount is the amount of tips\\n     */\\n    function addTip(uint256 _requestId, uint256 _amount) external {\\n        _transfer(msg.sender, address(this), _amount);\\n        emit TipAdded(msg.sender, _requestId, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9f46f34bb189d10920b173628d0e871139be08bd2a98f32b6966ff044210e249\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600781526020017f5472696275746500000000000000000000000000000000000000000000000000815250600790805190602001906200005f929190620000d0565b506040518060400160405280600381526020017f545242000000000000000000000000000000000000000000000000000000000081525060089080519060200190620000ad929190620000d0565b506012600960006101000a81548160ff021916908360ff160217905550620001e5565b828054620000de9062000180565b90600052602060002090601f0160209004810192826200010257600085556200014e565b82601f106200011d57805160ff19168380011785556200014e565b828001600101855582156200014e579182015b828111156200014d57825182559160200191906001019062000130565b5b5090506200015d919062000161565b5090565b5b808211156200017c57600081600090555060010162000162565b5090565b600060028204905060018216806200019957607f821691505b60208210811415620001b057620001af620001b6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61199580620001f56000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063752d49a1116100c3578063a9059cbb1161007c578063a9059cbb14610412578063acebfc5414610442578063b041d6961461045e578063b86d1d631461048e578063dd62ed3e146104aa578063fb0ceb04146104da5761014d565b8063752d49a11461031857806377fbb6631461033457806393fa49151461036457806395d89b4114610394578063a3183701146103b2578063a457c2d7146103e25761014d565b8063313ce56711610115578063313ce5671461021e578063395093511461023c5780633df0777b1461026c57806346eee1c41461029c57806362f55112146102cc57806370a08231146102e85761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd146101a057806323b872dd146101be57806327e235e3146101ee575b600080fd5b61015a61050a565b60405161016791906114ce565b60405180910390f35b61018a600480360381019061018591906112fd565b61059c565b60405161019791906114b3565b60405180910390f35b6101a86105b3565b6040516101b59190611590565b60405180910390f35b6101d860048036038101906101d391906112ae565b6105bd565b6040516101e591906114b3565b60405180910390f35b61020860048036038101906102039190611249565b610667565b6040516102159190611590565b60405180910390f35b61022661067f565b60405161023391906115e2565b60405180910390f35b610256600480360381019061025191906112fd565b610696565b60405161026391906114b3565b60405180910390f35b61028660048036038101906102819190611362565b610734565b60405161029391906114b3565b60405180910390f35b6102b660048036038101906102b19190611339565b610770565b6040516102c39190611590565b60405180910390f35b6102e660048036038101906102e19190611362565b610790565b005b61030260048036038101906102fd9190611249565b610831565b60405161030f9190611590565b60405180910390f35b610332600480360381019061032d9190611362565b61087a565b005b61034e60048036038101906103499190611362565b6108d8565b60405161035b9190611590565b60405180910390f35b61037e60048036038101906103799190611362565b610972565b60405161038b9190611590565b60405180910390f35b61039c6109a0565b6040516103a991906114ce565b60405180910390f35b6103cc60048036038101906103c79190611362565b610a32565b6040516103d99190611590565b60405180910390f35b6103fc60048036038101906103f791906112fd565b610a57565b60405161040991906114b3565b60405180910390f35b61042c600480360381019061042791906112fd565b610af5565b60405161043991906114b3565b60405180910390f35b61045c60048036038101906104579190611362565b610b0c565b005b61047860048036038101906104739190611362565b610b75565b60405161048591906114b3565b60405180910390f35b6104a860048036038101906104a39190611249565b610ba4565b005b6104c460048036038101906104bf9190611272565b610bba565b6040516104d19190611590565b60405180910390f35b6104f460048036038101906104ef9190611362565b610c41565b6040516105019190611590565b60405180910390f35b6060600780546105199061172b565b80601f01602080910402602001604051908101604052809291908181526020018280546105459061172b565b80156105925780601f1061056757610100808354040283529160200191610592565b820191906000526020600020905b81548152906001019060200180831161057557829003601f168201915b5050505050905090565b60006105a9338484610c72565b6001905092915050565b6000600654905090565b60006105ca848484610e3d565b61065c843384600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610657919061166f565b610c72565b600190509392505050565b60036020528060005260406000206000915090505481565b6000600960009054906101000a900460ff16905090565b600061072a338484600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107259190611619565b610c72565b6001905092915050565b600060016000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b600060026000838152602001908152602001600020805490509050919050565b80600080848152602001908152602001600020600042815260200190815260200160002081905550600260008381526020019081526020016000204290806001815401808255809150506001900390600052602060002001600090919091909150557fba11e319aee26e7bbac889432515ba301ec8f6d27bf6b94829c21a65c5f6ff25824283604051610825939291906115ab565b60405180910390a15050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610885333083610e3d565b813373ffffffffffffffffffffffffffffffffffffffff167f9e771e1220a6c2e407f3601f70a769ca9fff75a110d1687e0b582824673a1f5c836040516108cc9190611590565b60405180910390a35050565b6000806002600085815260200190815260200160002080549050905060008114806109035750828111155b1561091257600091505061096c565b60026000858152602001908152602001600020838154811061095d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549150505b92915050565b6000806000848152602001908152602001600020600083815260200190815260200160002054905092915050565b6060600880546109af9061172b565b80601f01602080910402602001604051908101604052809291908181526020018280546109db9061172b565b8015610a285780601f106109fd57610100808354040283529160200191610a28565b820191906000526020600020905b815481529060010190602001808311610a0b57829003601f168201915b5050505050905090565b6000602052816000526040600020602052806000526040600020600091509150505481565b6000610aeb338484600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ae6919061166f565b610c72565b6001905092915050565b6000610b02338484610e3d565b6001905092915050565b60008060008481526020019081526020016000206000838152602001908152602001600020819055506001806000848152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b610bb781683635c9adc5dea000006110a3565b50565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60026020528160005260406000208181548110610c5d57600080fd5b90600052602060002001600091509150505481565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ce2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd990611550565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4990611510565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610e309190611590565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ead576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea490611530565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f14906114f0565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f68919061166f565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ff69190611619565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516110969190611590565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110a90611570565b60405180910390fd5b806006546111219190611619565b60068190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111729190611619565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516112139190611590565b60405180910390a35050565b60008135905061122e81611931565b92915050565b60008135905061124381611948565b92915050565b60006020828403121561125b57600080fd5b60006112698482850161121f565b91505092915050565b6000806040838503121561128557600080fd5b60006112938582860161121f565b92505060206112a48582860161121f565b9150509250929050565b6000806000606084860312156112c357600080fd5b60006112d18682870161121f565b93505060206112e28682870161121f565b92505060406112f386828701611234565b9150509250925092565b6000806040838503121561131057600080fd5b600061131e8582860161121f565b925050602061132f85828601611234565b9150509250929050565b60006020828403121561134b57600080fd5b600061135984828501611234565b91505092915050565b6000806040838503121561137557600080fd5b600061138385828601611234565b925050602061139485828601611234565b9150509250929050565b6113a7816116b5565b82525050565b60006113b8826115fd565b6113c28185611608565b93506113d28185602086016116f8565b6113db816117bb565b840191505092915050565b60006113f3602383611608565b91506113fe826117cc565b604082019050919050565b6000611416602283611608565b91506114218261181b565b604082019050919050565b6000611439602583611608565b91506114448261186a565b604082019050919050565b600061145c602483611608565b9150611467826118b9565b604082019050919050565b600061147f601f83611608565b915061148a82611908565b602082019050919050565b61149e816116e1565b82525050565b6114ad816116eb565b82525050565b60006020820190506114c8600083018461139e565b92915050565b600060208201905081810360008301526114e881846113ad565b905092915050565b60006020820190508181036000830152611509816113e6565b9050919050565b6000602082019050818103600083015261152981611409565b9050919050565b600060208201905081810360008301526115498161142c565b9050919050565b600060208201905081810360008301526115698161144f565b9050919050565b6000602082019050818103600083015261158981611472565b9050919050565b60006020820190506115a56000830184611495565b92915050565b60006060820190506115c06000830186611495565b6115cd6020830185611495565b6115da6040830184611495565b949350505050565b60006020820190506115f760008301846114a4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611624826116e1565b915061162f836116e1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156116645761166361175d565b5b828201905092915050565b600061167a826116e1565b9150611685836116e1565b9250828210156116985761169761175d565b5b828203905092915050565b60006116ae826116c1565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156117165780820151818401526020810190506116fb565b83811115611725576000848401525b50505050565b6000600282049050600182168061174357607f821691505b602082108114156117575761175661178c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61193a816116a3565b811461194557600080fd5b50565b611951816116e1565b811461195c57600080fd5b5056fea2646970667358221220055abf98899802b9a3ee942da3d294e9fa5f9aa8141043aeff77618ec37a27ad64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063752d49a1116100c3578063a9059cbb1161007c578063a9059cbb14610412578063acebfc5414610442578063b041d6961461045e578063b86d1d631461048e578063dd62ed3e146104aa578063fb0ceb04146104da5761014d565b8063752d49a11461031857806377fbb6631461033457806393fa49151461036457806395d89b4114610394578063a3183701146103b2578063a457c2d7146103e25761014d565b8063313ce56711610115578063313ce5671461021e578063395093511461023c5780633df0777b1461026c57806346eee1c41461029c57806362f55112146102cc57806370a08231146102e85761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd146101a057806323b872dd146101be57806327e235e3146101ee575b600080fd5b61015a61050a565b60405161016791906114ce565b60405180910390f35b61018a600480360381019061018591906112fd565b61059c565b60405161019791906114b3565b60405180910390f35b6101a86105b3565b6040516101b59190611590565b60405180910390f35b6101d860048036038101906101d391906112ae565b6105bd565b6040516101e591906114b3565b60405180910390f35b61020860048036038101906102039190611249565b610667565b6040516102159190611590565b60405180910390f35b61022661067f565b60405161023391906115e2565b60405180910390f35b610256600480360381019061025191906112fd565b610696565b60405161026391906114b3565b60405180910390f35b61028660048036038101906102819190611362565b610734565b60405161029391906114b3565b60405180910390f35b6102b660048036038101906102b19190611339565b610770565b6040516102c39190611590565b60405180910390f35b6102e660048036038101906102e19190611362565b610790565b005b61030260048036038101906102fd9190611249565b610831565b60405161030f9190611590565b60405180910390f35b610332600480360381019061032d9190611362565b61087a565b005b61034e60048036038101906103499190611362565b6108d8565b60405161035b9190611590565b60405180910390f35b61037e60048036038101906103799190611362565b610972565b60405161038b9190611590565b60405180910390f35b61039c6109a0565b6040516103a991906114ce565b60405180910390f35b6103cc60048036038101906103c79190611362565b610a32565b6040516103d99190611590565b60405180910390f35b6103fc60048036038101906103f791906112fd565b610a57565b60405161040991906114b3565b60405180910390f35b61042c600480360381019061042791906112fd565b610af5565b60405161043991906114b3565b60405180910390f35b61045c60048036038101906104579190611362565b610b0c565b005b61047860048036038101906104739190611362565b610b75565b60405161048591906114b3565b60405180910390f35b6104a860048036038101906104a39190611249565b610ba4565b005b6104c460048036038101906104bf9190611272565b610bba565b6040516104d19190611590565b60405180910390f35b6104f460048036038101906104ef9190611362565b610c41565b6040516105019190611590565b60405180910390f35b6060600780546105199061172b565b80601f01602080910402602001604051908101604052809291908181526020018280546105459061172b565b80156105925780601f1061056757610100808354040283529160200191610592565b820191906000526020600020905b81548152906001019060200180831161057557829003601f168201915b5050505050905090565b60006105a9338484610c72565b6001905092915050565b6000600654905090565b60006105ca848484610e3d565b61065c843384600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610657919061166f565b610c72565b600190509392505050565b60036020528060005260406000206000915090505481565b6000600960009054906101000a900460ff16905090565b600061072a338484600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107259190611619565b610c72565b6001905092915050565b600060016000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b600060026000838152602001908152602001600020805490509050919050565b80600080848152602001908152602001600020600042815260200190815260200160002081905550600260008381526020019081526020016000204290806001815401808255809150506001900390600052602060002001600090919091909150557fba11e319aee26e7bbac889432515ba301ec8f6d27bf6b94829c21a65c5f6ff25824283604051610825939291906115ab565b60405180910390a15050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610885333083610e3d565b813373ffffffffffffffffffffffffffffffffffffffff167f9e771e1220a6c2e407f3601f70a769ca9fff75a110d1687e0b582824673a1f5c836040516108cc9190611590565b60405180910390a35050565b6000806002600085815260200190815260200160002080549050905060008114806109035750828111155b1561091257600091505061096c565b60026000858152602001908152602001600020838154811061095d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549150505b92915050565b6000806000848152602001908152602001600020600083815260200190815260200160002054905092915050565b6060600880546109af9061172b565b80601f01602080910402602001604051908101604052809291908181526020018280546109db9061172b565b8015610a285780601f106109fd57610100808354040283529160200191610a28565b820191906000526020600020905b815481529060010190602001808311610a0b57829003601f168201915b5050505050905090565b6000602052816000526040600020602052806000526040600020600091509150505481565b6000610aeb338484600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ae6919061166f565b610c72565b6001905092915050565b6000610b02338484610e3d565b6001905092915050565b60008060008481526020019081526020016000206000838152602001908152602001600020819055506001806000848152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b610bb781683635c9adc5dea000006110a3565b50565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60026020528160005260406000208181548110610c5d57600080fd5b90600052602060002001600091509150505481565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ce2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd990611550565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4990611510565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610e309190611590565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ead576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea490611530565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f14906114f0565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f68919061166f565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ff69190611619565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516110969190611590565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110a90611570565b60405180910390fd5b806006546111219190611619565b60068190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111729190611619565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516112139190611590565b60405180910390a35050565b60008135905061122e81611931565b92915050565b60008135905061124381611948565b92915050565b60006020828403121561125b57600080fd5b60006112698482850161121f565b91505092915050565b6000806040838503121561128557600080fd5b60006112938582860161121f565b92505060206112a48582860161121f565b9150509250929050565b6000806000606084860312156112c357600080fd5b60006112d18682870161121f565b93505060206112e28682870161121f565b92505060406112f386828701611234565b9150509250925092565b6000806040838503121561131057600080fd5b600061131e8582860161121f565b925050602061132f85828601611234565b9150509250929050565b60006020828403121561134b57600080fd5b600061135984828501611234565b91505092915050565b6000806040838503121561137557600080fd5b600061138385828601611234565b925050602061139485828601611234565b9150509250929050565b6113a7816116b5565b82525050565b60006113b8826115fd565b6113c28185611608565b93506113d28185602086016116f8565b6113db816117bb565b840191505092915050565b60006113f3602383611608565b91506113fe826117cc565b604082019050919050565b6000611416602283611608565b91506114218261181b565b604082019050919050565b6000611439602583611608565b91506114448261186a565b604082019050919050565b600061145c602483611608565b9150611467826118b9565b604082019050919050565b600061147f601f83611608565b915061148a82611908565b602082019050919050565b61149e816116e1565b82525050565b6114ad816116eb565b82525050565b60006020820190506114c8600083018461139e565b92915050565b600060208201905081810360008301526114e881846113ad565b905092915050565b60006020820190508181036000830152611509816113e6565b9050919050565b6000602082019050818103600083015261152981611409565b9050919050565b600060208201905081810360008301526115498161142c565b9050919050565b600060208201905081810360008301526115698161144f565b9050919050565b6000602082019050818103600083015261158981611472565b9050919050565b60006020820190506115a56000830184611495565b92915050565b60006060820190506115c06000830186611495565b6115cd6020830185611495565b6115da6040830184611495565b949350505050565b60006020820190506115f760008301846114a4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611624826116e1565b915061162f836116e1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156116645761166361175d565b5b828201905092915050565b600061167a826116e1565b9150611685836116e1565b9250828210156116985761169761175d565b5b828203905092915050565b60006116ae826116c1565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156117165780820151818401526020810190506116fb565b83811115611725576000848401525b50505050565b6000600282049050600182168061174357607f821691505b602082108114156117575761175661178c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61193a816116a3565b811461194557600080fd5b50565b611951816116e1565b811461195c57600080fd5b5056fea2646970667358221220055abf98899802b9a3ee942da3d294e9fa5f9aa8141043aeff77618ec37a27ad64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTip(uint256,uint256)": {
        "details": "Adds a tip to a given request Id.",
        "params": {
          "_amount": "is the amount of tips",
          "_requestId": "is the requestId to look up"
        }
      },
      "allowance(address,address)": {
        "details": "Retruns the amount that an address is alowed to spend of behalf of other",
        "params": {
          "owner": "The address which owns the tokens",
          "spender": "The address that will use the tokens"
        },
        "returns": {
          "_0": "uint256 Indicating the amount of allowed tokens"
        }
      },
      "approve(address,uint256)": {
        "details": "Approves  amount that an address is alowed to spend of behalf of other",
        "params": {
          "amount": "The amount that msg.sender is allowing spender to use",
          "spender": "The address which user the tokens"
        },
        "returns": {
          "_0": "bool If the transaction succeeded"
        }
      },
      "balanceOf(address)": {
        "details": "Returns the balance of a given user."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Helper function to increase the allowance"
      },
      "disputeValue(uint256,uint256)": {
        "details": "A mock function to create a dispute",
        "params": {
          "_requestId": "The tellorId to be disputed",
          "_timestamp": "the timestamp that indentifies for the value"
        }
      },
      "faucet(address)": {
        "details": "Public function to mint tokens for the passed address",
        "params": {
          "user": "The address which will own the tokens"
        }
      },
      "getNewValueCountbyRequestId(uint256)": {
        "details": "Counts the number of values that have been submited for the request",
        "params": {
          "_requestId": "the requestId to look up"
        },
        "returns": {
          "_0": "uint count of the number of values received for the requestId"
        }
      },
      "getTimestampbyRequestIDandIndex(uint256,uint256)": {
        "details": "Gets the timestamp for the value based on their index",
        "params": {
          "_requestId": "is the requestId to look up",
          "index": "is the value index to look up"
        },
        "returns": {
          "_0": "uint timestamp"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Helper function to increase the allowance"
      },
      "isInDispute(uint256,uint256)": {
        "details": "Gets if the mined value for the specified requestId/_timestamp is currently under dispute",
        "params": {
          "_requestId": "to looku p",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "returns": {
          "_0": "bool true if requestId/timestamp is under dispute"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "retrieveData(uint256,uint256)": {
        "details": "Retreive value from oracle based on requestId/timestamp",
        "params": {
          "_requestId": "being requested",
          "_timestamp": "to retreive data/value from"
        },
        "returns": {
          "_0": "uint value for requestId/timestamp submitted"
        }
      },
      "submitValue(uint256,uint256)": {
        "details": "A mock function to submit a value to be read withoun miners needed",
        "params": {
          "_requestId": "The tellorId to associate the value to",
          "_value": "the value for the requestId"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token."
      },
      "totalSupply()": {
        "details": "Returns the total supply of the token."
      },
      "transfer(address,uint256)": {
        "details": "Transfer tokens from user to another",
        "params": {
          "amount": "The amount of tokens, including decimals, to transfer",
          "recipient": "The destination address"
        },
        "returns": {
          "_0": "bool If the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from user to another",
        "params": {
          "amount": "The amount of tokens, including decimals, to transfer",
          "recipient": "The destination address",
          "sender": "The address which owns the tokens"
        },
        "returns": {
          "_0": "bool If the transfer succeeded"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2579,
        "contract": "contracts/test/MockOracle.sol:MockOracle",
        "label": "values",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2585,
        "contract": "contracts/test/MockOracle.sol:MockOracle",
        "label": "isDisputed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2590,
        "contract": "contracts/test/MockOracle.sol:MockOracle",
        "label": "timestamps",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2594,
        "contract": "contracts/test/MockOracle.sol:MockOracle",
        "label": "balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2598,
        "contract": "contracts/test/MockOracle.sol:MockOracle",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2604,
        "contract": "contracts/test/MockOracle.sol:MockOracle",
        "label": "_allowances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2606,
        "contract": "contracts/test/MockOracle.sol:MockOracle",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2608,
        "contract": "contracts/test/MockOracle.sol:MockOracle",
        "label": "_name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 2610,
        "contract": "contracts/test/MockOracle.sol:MockOracle",
        "label": "_symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 2612,
        "contract": "contracts/test/MockOracle.sol:MockOracle",
        "label": "_decimals",
        "offset": 0,
        "slot": "9",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
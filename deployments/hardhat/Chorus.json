{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_tellorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralPriceGranularity",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_inflRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_inflBeneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isWhitelisted",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralPriceAge",
          "type": "uint256"
        }
      ],
      "name": "CollateralPriceAge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralThreshold",
          "type": "uint256"
        }
      ],
      "name": "CollateralThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokensAmnt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralAmnt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralPenalty",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newPenalty",
          "type": "uint256"
        }
      ],
      "name": "LiquidationPenatly",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralRatio",
          "type": "uint256"
        }
      ],
      "name": "MintTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "NewWhitelistAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "NewWhitelistedAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralAmnt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralRatio",
          "type": "uint256"
        }
      ],
      "name": "WithdrawCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmnt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralAmnt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawTokenRequest",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralPriceAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralPriceGranularity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inflBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inflLastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inflRatePerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWhitelistedSystem",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationPenatly",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "mintToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "requestWithdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setCollateralPriceAge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setCollateralThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationPenatly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setWhitelistAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateInflation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3180f447cd1e805fe714f17a2bfd048db36031e33b78b73744602564f20d64f3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "4784013",
    "logsBloom": "0x
    "blockHash": "0xdcff8ac8d1bba43851679c2d888501916e0462c040b752ba47d590b660bc12ce",
    "transactionHash": "0x3180f447cd1e805fe714f17a2bfd048db36031e33b78b73744602564f20d64f3",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "4784013",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    1,
    1000000,
    "Note",
    "NTO",
    "105170917901244400",
    "0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc",
    false
  ],
  "solcInputHash": "c15db38592d3463a0eaa0113d0cc6faf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tellorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralPriceGranularity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_inflRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inflBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralPriceAge\",\"type\":\"uint256\"}],\"name\":\"CollateralPriceAge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralThreshold\",\"type\":\"uint256\"}],\"name\":\"CollateralThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensAmnt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralAmnt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralPenalty\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPenalty\",\"type\":\"uint256\"}],\"name\":\"LiquidationPenatly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewWhitelistAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"NewWhitelistedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralAmnt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"}],\"name\":\"WithdrawCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmnt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralAmnt\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokenRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPriceAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPriceGranularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflRatePerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistedSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationPenatly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCollateralPriceAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCollateralThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setLiquidationPenatly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWhitelistedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateInflation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Tellor Inc.\",\"details\":\"Chorus is a structure for issuing semi-stablecoins as community currencies*\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"collateralBalance()\":{\"details\":\"Returns the current token price in USD reduced by the current inflation.\",\"returns\":{\"_0\":\"uint256 token price\"}},\"collateralPrice()\":{\"details\":\"Checks the Tellor oracle and gets the collateral price\",\"returns\":{\"_0\":\"uint256 collateral price in USD upscaled to e18 precision.\"}},\"collateralRatio()\":{\"details\":\"A view funciton to look at the collateralization of the system\",\"returns\":{\"_0\":\"uint256 collateral token balance of this address / totalSupply\"}},\"constructor\":{\"details\":\"This is the constructor, sets the inital paramaters in the system The parameters include, the Tellor Address, collateral token's address, collateral token's requestID, the price granualrity, the token name,  token's symbol, inflation rate per year, and the inflation beneficiary \"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"depositCollateral(uint256)\":{\"details\":\"Allows the admin to deposit collateral\",\"params\":{\"_amount\":\"the amount of collateral token to deposit\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"liquidate()\":{\"details\":\"Function to allow anyone to liquidate the system if it is undercollateralized\"},\"mintToken(uint256,address)\":{\"details\":\"Allows the admin to mint tokens up to the collateral threshold\",\"params\":{\"_amount\":\"the amount of collateral tokens to mint\",\"_to\":\"the address to mint them to;\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"requestWithdrawToken(uint256)\":{\"details\":\"Allows a user to request to withdraw tokens\",\"params\":{\"_amount\":\"the amount of tokens to withdraw\"}},\"setAdmin(address)\":{\"details\":\"Allows the user to set a new admin address\",\"params\":{\"_newAdmin\":\"the address of the new admin address\"}},\"setCollateralPriceAge(uint256)\":{\"details\":\"Allows the admin to set the collateral price Age (delay in feed from Tellor)\",\"params\":{\"_amount\":\"the amount of delay in the price feed (we want to wait for disputes)\"}},\"setCollateralThreshold(uint256)\":{\"details\":\"Allows the admin to set the Collateral threshold\",\"params\":{\"_amount\":\"new collateral threshold\"}},\"setLiquidationPenatly(uint256)\":{\"details\":\"Allows the admin to set the liquidation penalty\",\"params\":{\"_amount\":\"the amount of the liquidation penalty\"}},\"setWhitelistAdmin(address)\":{\"details\":\"Allows the user to set a new admin address\",\"params\":{\"_newAdmin\":\"the address of the new admin address\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"tokenPrice()\":{\"details\":\"Returns the current token price in USD reduced by the current inflation.\",\"returns\":{\"_0\":\"uint256 token price\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"updateInflation()\":{\"details\":\"Function to reduce token price by the inflation rate, increases the total supply by the inflation rate and sends the new tokens to the inflation beneficiary.\"},\"withdrawCollateral(uint256)\":{\"details\":\"Allows the admin to withdraw collateral above the threshold\",\"params\":{\"_amount\":\"the amount of collateral token to deposit\"}},\"withdrawToken()\":{\"details\":\"Allows a user to withdraw tokens\"}},\"title\":\"Chorus\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Chorus.sol\":\"Chorus\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Chorus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"./OracleGetter.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Inflation.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/** \\n @author Tellor Inc.\\n @title Chorus\\n @dev Chorus is a structure for issuing semi-stablecoins as community currencies\\n**/\\n// slither-disable-next-line missing-inheritance\\ncontract Chorus is Inflation, OracleGetter, ERC20 {\\n    /*Events*/\\n    event CollateralThreshold(uint256 _collateralThreshold);//emits if collateral threshold changes\\n    event CollateralPriceAge(uint256 _collateralPriceAge);//emits if collateral price age changes\\n    event Liquidate(\\n        address _party,\\n        uint256 _tokensAmnt,\\n        uint256 _collateralAmnt,\\n        uint256 _collateralPenalty\\n    );//emits upon a liquidation\\n    event LiquidationPenatly(uint256 _newPenalty);//emits when the liquidation penalty changes\\n    event MintTokens(\\n        address _holder,\\n        uint256 _amount,\\n        address _to,\\n        uint256 _collateralRatio\\n    );//emits when new tokens are minted\\n    event NewAdmin(address _newAdmin);//emits when a new admin is set\\n    event WithdrawCollateral(\\n        address _holder,\\n        uint256 _collateralAmnt,\\n        uint256 _collateralRatio\\n    );//emits when collateral is withdrawn\\n    event WithdrawToken(address _holder, uint256 _tokenAmnt, uint256 _collateralAmnt);//emits when tokens are withdrawn\\n    event WithdrawTokenRequest(address _user, uint256 _amount);\\n    \\n    /*Variables*/\\n    struct WithdrawDetails{\\n        uint256 amount;\\n        uint256 requestDate;\\n    }\\n    ERC20 public collateralToken;\\n    address public admin = msg.sender;\\n    uint256 private tknPrice = 1e18;\\n    uint256 public collateralID; // The collateral id used to check the Tellor oracle for its USD price.\\n    uint256 public collateralPriceGranularity;\\n    uint256 public collateralThreshold = 15e17; // 150%.\\n    uint256 public collateralPriceAge = 3600; // e.g. 1hr.  This is the delay in the feed from Tellor\\n    uint256 public liquidationPenatly = 0;\\n    uint256 public inflRatePerSec;// The rate at which the token decreases value. 1e18 precision. 100e18 is 100%.\\n    uint256 public inflLastUpdate = block.timestamp;\\n    address public inflBeneficiary; // Where to send the inflation tokens.\\n    mapping(address => WithdrawDetails) withdrawRequested;\\n\\n    /*Modifiers*/\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"not an admin\\\");\\n        _;\\n    }\\n\\n    modifier within100e18Range(uint256 _value) {\\n        require(_value > 0 && _value < 100e18, \\\"value not within allowed limits\\\");\\n        _;\\n    }\\n\\n    /*Functions*/\\n    /**\\n     * @dev This is the constructor, sets the inital paramaters in the system\\n     * The parameters include, the Tellor Address, collateral token's address,\\n     * collateral token's requestID, the price granualrity, the token name, \\n     * token's symbol, inflation rate per year, and the inflation beneficiary \\n     */\\n    constructor(\\n        address payable _tellorAddress,\\n        address _collateralToken,\\n        uint256 _collateralID,\\n        uint256 _collateralPriceGranularity,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint256 _inflRatePerYear,\\n        address _inflBeneficiary,\\n        bool _isWhitelisted\\n    )\\n        OracleGetter(_tellorAddress)\\n        ERC20(_tokenName, _tokenSymbol,_isWhitelisted)\\n        within100e18Range(_inflRatePerYear)\\n    {\\n        collateralID = _collateralID;\\n        collateralToken = ERC20(_collateralToken);\\n        collateralPriceGranularity = _collateralPriceGranularity;\\n        require(_collateralPriceGranularity > 0 && _collateralPriceGranularity <= 1e18, \\\"value not within allowed limits\\\");\\n        require(_inflBeneficiary != address(0), \\\"benificiary address not set\\\");\\n        inflBeneficiary = _inflBeneficiary;\\n        inflRatePerSec = yearlyRateToPerSec(_inflRatePerYear);\\n    }\\n\\n    /**\\n     * @dev Returns the current token price in USD reduced by the current inflation.\\n     * @return uint256 token price\\n     */\\n    function collateralBalance() external view returns (uint256) {\\n        return collateralToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Checks the Tellor oracle and gets the collateral price\\n     * @return uint256 collateral price in USD upscaled to e18 precision.\\n     */\\n    // slither-disable-next-line timestamp\\n    function collateralPrice() public view returns (uint256) {\\n        (bool _didGet, uint256 _collateralPrice, ) =\\n            _getDataBefore(collateralID, block.timestamp - collateralPriceAge);\\n        require(_didGet, \\\"getting oracle price\\\");\\n        return mul(_collateralPrice, div(1e18, collateralPriceGranularity));\\n    }\\n\\n    /**\\n     * @dev A view funciton to look at the collateralization of the system\\n     * @return uint256 collateral token balance of this address / totalSupply\\n     */\\n    function collateralRatio() public view returns (uint256) {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        // slither-disable-next-line incorrect-equality\\n        if(totalSupply() == 0 || _collateralBalance == 0) {\\n            return 0;\\n        }\\n        uint256 _collateralValue = wmul(collateralPrice(), _collateralBalance);\\n        uint256 tokenSupplyWithInflInterest =\\n            accrueInterest(totalSupply(), inflRatePerSec, block.timestamp - inflLastUpdate);\\n        uint256 _tokenValue = wmul(tokenPrice(), tokenSupplyWithInflInterest);\\n        return add(1e18, wdiv(_tokenValue, _collateralValue));\\n    }\\n\\n    /**\\n     * @dev Allows the admin to deposit collateral\\n     * @param _amount the amount of collateral token to deposit\\n     */\\n    function depositCollateral(uint256 _amount) external onlyAdmin {\\n        require(_amount > 0, \\\"deposit amount 0\\\");\\n        require(\\n            collateralToken.transferFrom(msg.sender, address(this), _amount),\\n            \\\"failed collateral deposit transfer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to allow anyone to liquidate the system if it is undercollateralized\\n     */\\n    function liquidate() external {\\n        require(\\n            collateralRatio() > collateralThreshold,\\n            \\\"collateral utilizatoin is below threshold\\\"\\n        );\\n        require(balanceOf(msg.sender) > 0, \\\"msg sender doesn't own any tokens\\\");\\n        uint256 _tknSuplyRatio =\\n            wdiv(collateralToken.balanceOf(address(this)), totalSupply());\\n        uint256 _tokensToBurn = balanceOf(msg.sender);\\n        uint256 _collatAmt = wmul(_tokensToBurn, _tknSuplyRatio);\\n        uint256 _collatPenalty = wmul(_collatAmt, liquidationPenatly);\\n        emit Liquidate(msg.sender, _tokensToBurn, _collatAmt, _collatPenalty);\\n        _burn(msg.sender, _tokensToBurn);\\n        require(\\n            collateralToken.transfer(msg.sender, sub(_collatAmt, _collatPenalty)),\\n            \\\"collateral liquidation transfer fails\\\"\\n        );\\n        require(\\n            collateralToken.transfer(inflBeneficiary, _collatPenalty),\\n            \\\"collateral liquidation penalty transfer fails\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows the admin to mint tokens up to the collateral threshold\\n     * @param _amount the amount of collateral tokens to mint\\n     * @param _to   the address to mint them to;\\n     */\\n    function mintToken(uint256 _amount, address _to) external onlyAdmin {\\n        _mint(_to, _amount);\\n        uint256 _cRatio = collateralRatio();\\n        require(\\n            _cRatio < collateralThreshold,\\n            \\\"collateral utilization above the threshold\\\"\\n        );\\n        emit MintTokens(msg.sender, _amount, _to, _cRatio);\\n    }\\n\\n     /**\\n     * @dev Allows a user to request to withdraw tokens\\n     * @param _amount the amount of tokens to withdraw\\n     */\\n    function requestWithdrawToken(uint256 _amount) external {\\n        require(_amount > 0, \\\"amount should be greater than 0\\\");\\n        require(balanceOf(msg.sender) >= _amount, \\\"not enough balance\\\");\\n        withdrawRequested[msg.sender].requestDate = block.timestamp;\\n        withdrawRequested[msg.sender].amount = _amount;\\n        _transfer(msg.sender, address(this), _amount);\\n        emit WithdrawTokenRequest(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Allows the user to set a new admin address\\n     * @param _newAdmin the address of the new admin address\\n     */\\n    function setAdmin(address _newAdmin) external onlyAdmin {\\n        require(_newAdmin != address(0), \\\"cannot send to the zero address\\\");\\n        admin = _newAdmin;\\n        emit NewAdmin(_newAdmin);\\n    }\\n\\n    /**\\n     * @dev Allows the admin to set the collateral price Age (delay in feed from Tellor)\\n     * @param _amount the amount of delay in the price feed (we want to wait for disputes)\\n     */\\n    function setCollateralPriceAge(uint256 _amount) external onlyAdmin {\\n        collateralPriceAge = _amount;\\n        emit CollateralPriceAge(_amount);\\n    }\\n\\n    /**\\n     * @dev Allows the admin to set the Collateral threshold\\n     * @param _amount new collateral threshold\\n     */\\n    function setCollateralThreshold(uint256 _amount)\\n        external\\n        onlyAdmin\\n        within100e18Range(_amount)\\n    {\\n        collateralThreshold = _amount;\\n        emit CollateralThreshold(_amount);\\n    }\\n    \\n    /**\\n     * @dev Allows the admin to set the liquidation penalty\\n     * @param _amount the amount of the liquidation penalty\\n     */\\n    function setLiquidationPenatly(uint256 _amount)\\n        external\\n        onlyAdmin\\n        within100e18Range(_amount)\\n    {\\n        liquidationPenatly = wdiv(_amount, 100e18); // Convert to a fraction.\\n        emit LiquidationPenatly(liquidationPenatly);\\n    }\\n\\n    /**\\n     * @dev Returns the current token price in USD reduced by the current inflation.\\n     * @return uint256 token price\\n     */\\n    function tokenPrice() public view returns (uint256) {\\n        return\\n            accrueInflation(\\n                tknPrice,\\n                inflRatePerSec,\\n                block.timestamp - inflLastUpdate\\n            );\\n    }\\n    \\n    /**\\n     * @dev Function to reduce token price by the inflation rate,\\n     * increases the total supply by the inflation rate and\\n     * sends the new tokens to the inflation beneficiary.\\n     */\\n    // slither-disable-next-line timestamp\\n    function updateInflation() external {\\n        uint256 secsPassed = block.timestamp - inflLastUpdate;\\n        require(secsPassed > 0, \\\"no inflation increase yet\\\");\\n        inflLastUpdate = block.timestamp;\\n        tknPrice = accrueInflation(tknPrice, inflRatePerSec, secsPassed);\\n        uint256 _tokensToMint =\\n            sub(\\n                accrueInterest(totalSupply(), inflRatePerSec, secsPassed),\\n                totalSupply()\\n            );\\n        _mint(inflBeneficiary, _tokensToMint);\\n    }\\n\\n    /**\\n     * @dev Allows the admin to withdraw collateral above the threshold\\n     * @param _amount the amount of collateral token to deposit\\n     */\\n    function withdrawCollateral(uint256 _amount) external onlyAdmin {\\n        require(\\n            collateralToken.transfer(msg.sender, _amount),\\n            \\\"collateral transfer fails\\\"\\n        );\\n        uint256 _cRatio = collateralRatio();\\n        require(\\n            _cRatio < collateralThreshold,\\n            \\\"collateral utilization above the threshold\\\"\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit WithdrawCollateral(msg.sender, _amount, _cRatio);\\n    }\\n\\n    /**\\n     * @dev Allows a user to withdraw tokens\\n     */\\n    function withdrawToken() external {\\n        WithdrawDetails memory wd = withdrawRequested[msg.sender];\\n        uint256 _amount = withdrawRequested[msg.sender].amount;\\n        require(_amount > 0, \\\"amount should be greater than 0\\\");\\n        uint256 _waitPeriod = 1 + 100 * _amount / totalSupply() / 5; //increases by 1 day for every 5 percent\\n        // slither-disable-next-line timestamp\\n        require(block.timestamp - wd.requestDate >= 86400 * _waitPeriod, \\\"must wait to withdraw\\\");\\n        withdrawRequested[msg.sender].amount = 0;\\n        uint256 _collatPrice = collateralPrice();\\n        uint256 _priceRatio = wdiv(tokenPrice(), _collatPrice);\\n        uint256 _collateralAmnt = wmul(_priceRatio, _amount);\\n        _burn(address(this), _amount);\\n        require(\\n            collateralToken.transfer(msg.sender, _collateralAmnt),\\n            \\\"collateral transfer fail\\\"\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit WithdrawToken(msg.sender, _amount, _collateralAmnt);\\n    }\\n}\\n\",\"keccak256\":\"0xc2ce021b10031179c1394b472ca9c2cd2178c64b11aeb3b6a6cb9ebdc4eb04f0\",\"license\":\"MIT\"},\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/** \\n @author Open Zeppelin / Tellor\\n @title ERC20\\n @dev Taken from OZ, but no context\\n**/\\ncontract ERC20 is IERC20 {\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    address public whitelistAdmin;\\n    bool public isWhitelistedSystem;\\n    mapping(address => uint) public whitelistedAmount;\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    event NewWhitelistAdmin(address _newAdmin);\\n    event NewWhitelistedAmount(address _user, uint256 _amount);\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_, bool _isWhitelistedSystem) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n        isWhitelistedSystem = _isWhitelistedSystem;\\n        whitelistAdmin = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Allows the user to set a new admin address\\n     * @param _newAdmin the address of the new admin address\\n     */\\n    function setWhitelistAdmin(address _newAdmin) external {\\n         require(msg.sender == whitelistAdmin, \\\"not the whitelist admin\\\");\\n        require(_newAdmin != address(0), \\\"cannot send to the zero address\\\");\\n        whitelistAdmin = _newAdmin;\\n        emit NewWhitelistAdmin(_newAdmin);\\n    }\\n\\n    function setWhitelistedAmount(address _user, uint256 _amount) external{\\n            require(msg.sender == whitelistAdmin, \\\"not the whitelist admin\\\");\\n            whitelistedAmount[_user] = _amount;\\n            emit NewWhitelistedAmount(_user,_amount);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     * Requirements:\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     * Requirements:\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     * Emits an {Approval} event indicating the updated allowance.\\n     * Requirements:\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     * Emits an {Approval} event indicating the updated allowance.\\n     * Requirements:\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] - subtractedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     * Emits a {Transfer} event.\\n     * Requirements:\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        if (isWhitelistedSystem){\\n            require(_balances[recipient] + amount <= whitelistedAmount[recipient], \\\"recipient not whitelisted for amount\\\");\\n            require(_balances[sender] <= whitelistedAmount[sender], \\\"sender not whitelisted for amount\\\");\\n        }\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     * Requirements:\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        if (isWhitelistedSystem){\\n            require(_balances[account] + amount <= whitelistedAmount[account], \\\"recipient not whitelisted for amount\\\");\\n        }\\n        _totalSupply = _totalSupply + amount;\\n        _balances[account] = _balances[account] + amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     * Requirements:\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        _balances[account] = _balances[account] - amount;\\n        _totalSupply = _totalSupply - amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     * Emits an {Approval} event.\\n     * Requirements:\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n}\",\"keccak256\":\"0x434b4017857ec5a4acec9694299654a601f2243110f719ba23c0249786d2e52f\",\"license\":\"MIT\"},\"contracts/Inflation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"./Math.sol\\\";\\n\\n// Borrowed from https://github.com/wolflo/solidity-interest-helper.\\n// Inspired by https://medium.com/coinmonks/math-in-solidity-part-4-compound-interest-512d9e13041b\\n// Using DSMath from DappHub https://github.com/dapphub/ds-math\\n\\n/**\\n * @title Interest\\n * @author Nick Ward\\n * @dev Uses DSMath's wad and ray math to implement (approximately)\\n * continuously compounding interest by calculating discretely compounded\\n * interest compounded every second.\\n */\\ncontract Inflation is DSMath {\\n    //// Fixed point scale factors\\n    // wei -> the base unit\\n    // wad -> wei * 10 ** 18. 1 ether = 1 wad, so 0.5 ether can be used\\n    //      to represent a decimal wad of 0.5\\n    // ray -> wei * 10 ** 27\\n\\n    // Go from wad (10**18) to ray (10**27)\\n    function wadToRay(uint256 _wad) internal pure returns (uint256) {\\n        return mul(_wad, 10**9);\\n    }\\n\\n    // Go from wei to ray (10**27)\\n    function weiToRay(uint256 _wei) internal pure returns (uint256) {\\n        return mul(_wei, 10**27);\\n    }\\n\\n    // The most accurate way to calculate inflation is a loop with\\n    // for (let i = 0; i < secsPassed; i++) {\\n    //  `tokenPrice -= tokenPrice * inflRatePerSec`\\n    // }\\n    // but this is too slow and expencive so this is an algorithm that has a very small precision error.\\n    // The magic formula from https://medium.com/coinmonks/math-in-solidity-part-4-compound-interest-512d9e13041b\\n    function accrueInflation(\\n        uint256 _principal,\\n        uint256 _rate,\\n        uint256 _age\\n    ) internal pure returns (uint256) {\\n        return rdiv(_principal, rpow(_rate, _age));\\n    }\\n\\n    /**\\n     * @dev Uses an approximation of continuously compounded interest\\n     * (discretely compounded every second)\\n     * @param _principal The principal to calculate the interest on.\\n     *   Accepted in wei.\\n     * @param _rate The interest rate. Accepted as a ray representing\\n     *   1 + the effective interest rate per second, compounded every\\n     *   second. As an example:\\n     *   I want to accrue interest at a nominal rate (i) of 5.0% per year\\n     *   compounded continuously. (Effective Annual Rate of 5.127%).\\n     *   This is approximately equal to 5.0% per year compounded every\\n     *   second (to 8 decimal places, if max precision is essential,\\n     *   calculate nominal interest per year compounded every second from\\n     *   your desired effective annual rate). Effective Rate Per Second =\\n     *   Nominal Rate Per Second compounded every second = Nominal Rate\\n     *   Per Year compounded every second * conversion factor from years\\n     *   to seconds\\n     *   Effective Rate Per Second = 0.05 / (365 days/yr * 86400 sec/day) = 1.5854895991882 * 10 ** -9\\n     *   The value we want to send this function is\\n     *   1 * 10 ** 27 + Effective Rate Per Second * 10 ** 27\\n     *   = 1000000001585489599188229325\\n     *   This will return 5.1271096334354555 Dai on a 100 Dai principal\\n     *   over the course of one year (31536000 seconds)\\n     * @param _age The time period over which to accrue interest. Accepted\\n     *   in seconds.\\n     * @return The new principal as a wad. Equal to original principal +\\n     *   interest accrued\\n     */\\n    function accrueInterest(\\n        uint256 _principal,\\n        uint256 _rate,\\n        uint256 _age\\n    ) internal pure returns (uint256) {\\n        return rmul(_principal, rpow(_rate, _age));\\n    }\\n\\n    /**\\n     * @dev Takes in the desired nominal interest rate per year, compounded\\n     *   every second (this is approximately equal to nominal interest rate\\n     *   per year compounded continuously). Returns the ray value expected\\n     *   by the accrueInterest function\\n     * @param _rateWad A wad of the desired nominal interest rate per year,\\n     *   compounded continuously. Converting from ether to wei will effectively\\n     *   convert from a decimal value to a wad.\\n     *   So 5% rate should be input as yearlyRateToRay( 0.05 ether )\\n     * @return 1 * 10 ** 27 + Effective Interest Rate Per Second * 10 ** 27\\n     */\\n\\n    function yearlyRateToPerSec(uint256 _rateWad)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            add(\\n                wadToRay(1 ether),\\n                rdiv(wadToRay(_rateWad), weiToRay(365 * 86400))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x0853a6bc17058efebc6031ee930794cf8689e1c2c34d9157a1a8457a173486da\",\"license\":\"MIT\"},\"contracts/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/dapphub/ds-math\\n// Added the div function from openzepeling safeMath\\n\\npragma solidity 0.8.3;\\n\\ncontract DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    // slither-disable-next-line incorrect-equality\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 public constant WAD = 10**18;\\n    uint256 public constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    // Not sure if this is a false positive - https://github.com/dapphub/ds-math/issues/18\\n    // slither-disable-next-line weak-prng\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x688abf511cdeddd678246077f3c729f73a41b0426b9a5c877f48c85470e18f9f\",\"license\":\"MIT\"},\"contracts/OracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"./interfaces/ITellor.sol\\\";\\n\\n/** \\n @author Tellor Inc.\\n @title OracleGetter\\n @dev a way to access Tellor variables\\n**/\\ncontract OracleGetter {\\n    ITellor private tellor;\\n\\n    /**\\n     * @dev Constructor for the oracle getters\\n     * @param _tellor the tellor address\\n     */\\n    constructor(address payable _tellor) {\\n        tellor = ITellor(_tellor);\\n    }\\n    \\n    /**\\n     * @dev Allows the user to get the first value for the requestId before the specified timestamp\\n     * @param _requestId is the requestId to look up the value for\\n     * @param _timestamp before which to search for first verified value\\n     * @return _ifRetrieve bool true if it is able to retreive a value, the value, and the value's timestamp\\n     * @return _value the value retrieved\\n     * @return _timestampRetrieved the value's timestamp\\n     */\\n    function _getDataBefore(uint256 _requestId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (\\n            bool _ifRetrieve,\\n            uint256 _value,\\n            uint256 _timestampRetrieved\\n        )\\n    {\\n        (bool _found, uint256 _index) =\\n            _getIndexForDataBefore(_requestId, _timestamp);\\n        if (!_found) return (false, 0, 0);\\n        uint256 _time =\\n            tellor.getTimestampbyRequestIDandIndex(_requestId, _index);\\n        _value = tellor.retrieveData(_requestId, _time);\\n        //If value is diputed it'll return zero\\n        if (_value > 0) return (true, _value, _time);\\n        return (false, 0, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to get the index of the Tellor data\\n     * @param _requestId requestID for Tellor data feed\\n     * @param _timestamp timestamp of request\\n     */\\n    /* solhint-disable */\\n    function _getIndexForDataBefore(uint256 _requestId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        uint256 _count = tellor.getNewValueCountbyRequestId(_requestId);\\n        if (_count > 0) {\\n            uint256 _middle;\\n            uint256 _start = 0;\\n            uint256 _end = _count - 1;\\n            uint256 _time;\\n            //Checking Boundaries to short-circuit the algorithm\\n            _time = tellor.getTimestampbyRequestIDandIndex(_requestId, _start);\\n            if (_time >= _timestamp) return (false, 0);\\n            _time = tellor.getTimestampbyRequestIDandIndex(_requestId, _end);\\n            if (_time < _timestamp) return (true, _end);\\n            //Since the value is within our boundaries, do a binary search\\n            while (true) {\\n                _middle = (_end - _start) / 2 + 1 + _start;\\n                _time = tellor.getTimestampbyRequestIDandIndex(\\n                    _requestId,\\n                    _middle\\n                );\\n                if (_time < _timestamp) {\\n                    //get imeadiate next value\\n                    uint256 _nextTime =\\n                        tellor.getTimestampbyRequestIDandIndex(\\n                            _requestId,\\n                            _middle + 1\\n                        );\\n                    if (_nextTime >= _timestamp) {\\n                        return (true, _middle);//_time is correct\\n                    } else {\\n                        //look from middle + 1(next value) to end\\n                        _start = _middle + 1;\\n                    }\\n                } else {\\n                    uint256 _prevTime =\\n                        tellor.getTimestampbyRequestIDandIndex(\\n                            _requestId,\\n                            _middle - 1\\n                        );\\n                    if (_prevTime < _timestamp) {\\n                        // _prevtime is correct\\n                        return (true, _middle - 1);\\n                    } else {\\n                        //look from start to middle -1(prev value)\\n                        _end = _middle - 1;\\n                    }\\n                }\\n            }\\n        }\\n        return (false, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x78fd67c9b76e75f2eb07019c22a57eaf383210a9737c53c8ca0a2d12f5b8bad9\",\"license\":\"MIT\"},\"contracts/interfaces/ITellor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/** \\n @author Tellor Inc.\\n @title ITellor\\n @dev  This contract holds the interface for all Tellor functions\\n**/\\ninterface ITellor {\\n    /*Events*/\\n    event NewTellorAddress(address _newTellor);\\n    event NewDispute(\\n        uint256 indexed _disputeId,\\n        uint256 indexed _requestId,\\n        uint256 _timestamp,\\n        address _miner\\n    );\\n    event Voted(\\n        uint256 indexed _disputeID,\\n        bool _position,\\n        address indexed _voter,\\n        uint256 indexed _voteWeight\\n    );\\n    event DisputeVoteTallied(\\n        uint256 indexed _disputeID,\\n        int256 _result,\\n        address indexed _reportedMiner,\\n        address _reportingParty,\\n        bool _passed\\n    );\\n    event TipAdded(\\n        address indexed _sender,\\n        uint256 indexed _requestId,\\n        uint256 _tip,\\n        uint256 _totalTips\\n    );\\n    event NewChallenge(\\n        bytes32 indexed _currentChallenge,\\n        uint256[5] _currentRequestId,\\n        uint256 _difficulty,\\n        uint256 _totalTips\\n    );\\n    event NewValue(\\n        uint256[5] _requestId,\\n        uint256 _time,\\n        uint256[5] _value,\\n        uint256 _totalTips,\\n        bytes32 indexed _currentChallenge\\n    );\\n    event NonceSubmitted(\\n        address indexed _miner,\\n        string _nonce,\\n        uint256[5] _requestId,\\n        uint256[5] _value,\\n        bytes32 indexed _currentChallenge,\\n        uint256 _slot\\n    );\\n    event NewStake(address indexed _sender); //Emits upon new staker\\n    event StakeWithdrawn(address indexed _sender); //Emits when a staker is now no longer staked\\n    event StakeWithdrawRequested(address indexed _sender); //Emits when a staker begins the 7 day withdraw period\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); //ERC20 Transfer Event\\n\\n    /*Functions -- master*/\\n    function changeDeity(address _newDeity) external;\\n\\n    function changeOwner(address _newOwner) external;\\n\\n    function changeTellorContract(address _tellorContract) external;\\n\\n    /*Functions -- Extension*/\\n    function depositStake() external;\\n\\n    function requestStakingWithdraw() external;\\n\\n    function tallyVotes(uint256 _disputeId) external;\\n\\n    function updateMinDisputeFee() external;\\n\\n    function updateTellor(uint256 _disputeId) external;\\n\\n    function withdrawStake() external;\\n\\n    /*Functions -- Tellor*/\\n    function addTip(uint256 _requestId, uint256 _tip) external;\\n\\n    function changeExtension(address _extension) external;\\n\\n    function changeMigrator(address _migrator) external;\\n\\n    function migrate() external;\\n\\n    function migrateFor(\\n        address _destination,\\n        uint256 _amount,\\n        bool _bypass\\n    ) external;\\n\\n    function migrateForBatch(\\n        address[] calldata _destination,\\n        uint256[] calldata _amount\\n    ) external;\\n\\n    function migrateFrom(\\n        address _origin,\\n        address _destination,\\n        uint256 _amount,\\n        bool _bypass\\n    ) external;\\n\\n    function migrateFromBatch(\\n        address[] calldata _origin,\\n        address[] calldata _destination,\\n        uint256[] calldata _amount\\n    ) external;\\n\\n    function submitMiningSolution(\\n        string calldata _nonce,\\n        uint256[5] calldata _requestIds,\\n        uint256[5] calldata _values\\n    ) external;\\n\\n    /*Functions -- TellorGetters*/\\n    function didMine(bytes32 _challenge, address _miner)\\n        external\\n        view\\n        returns (bool);\\n\\n    function didVote(uint256 _disputeId, address _address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getAddressVars(bytes32 _data) external view returns (address);\\n\\n    function getAllDisputeVars(uint256 _disputeId)\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            bool,\\n            bool,\\n            bool,\\n            address,\\n            address,\\n            address,\\n            uint256[9] memory,\\n            int256\\n        );\\n\\n    function getDisputeIdByDisputeHash(bytes32 _hash)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getDisputeUintVars(uint256 _disputeId, bytes32 _data)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLastNewValue() external view returns (uint256, bool);\\n\\n    function getLastNewValueById(uint256 _requestId)\\n        external\\n        view\\n        returns (uint256, bool);\\n\\n    function getMinedBlockNum(uint256 _requestId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getMinersByRequestIdAndTimestamp(\\n        uint256 _requestId,\\n        uint256 _timestamp\\n    ) external view returns (address[5] memory);\\n\\n    function getNewValueCountbyRequestId(uint256 _requestId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRequestIdByRequestQIndex(uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRequestIdByTimestamp(uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRequestQ() external view returns (uint256[51] memory);\\n\\n    function getRequestUintVars(uint256 _requestId, bytes32 _data)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRequestVars(uint256 _requestId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getStakerInfo(address _staker)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getSubmissionsByTimestamp(uint256 _requestId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256[5] memory);\\n\\n    function getTimestampbyRequestIDandIndex(uint256 _requestID, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUintVar(bytes32 _data) external view returns (uint256);\\n\\n    function isInDispute(uint256 _requestId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bool);\\n\\n    function retrieveData(uint256 _requestId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function getNewCurrentVariables()\\n        external\\n        view\\n        returns (\\n            bytes32 _challenge,\\n            uint256[5] memory _requestIds,\\n            uint256 _difficulty,\\n            uint256 _tip\\n        );\\n\\n    function getNewVariablesOnDeck()\\n        external\\n        view\\n        returns (uint256[5] memory idsOnDeck, uint256[5] memory tipsOnDeck);\\n\\n    function getTopRequestIDs()\\n        external\\n        view\\n        returns (uint256[5] memory _requestIds);\\n\\n    /*Functions -- TellorStake*/\\n    function beginDispute(\\n        uint256 _requestId,\\n        uint256 _timestamp,\\n        uint256 _minerIndex\\n    ) external;\\n\\n    function proposeFork(address _propNewTellorAddress) external;\\n\\n    function unlockDisputeFee(uint256 _disputeId) external;\\n\\n    function verify() external returns (uint256);\\n\\n    function vote(uint256 _disputeId, bool _supportsDispute) external;\\n\\n    /*Functions -- TellorTransfer*/\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function allowance(address _user, address _spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allowedToTrade(address _user, uint256 _amount)\\n        external\\n        view\\n        returns (bool);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function balanceOfAt(address _user, uint256 _blockNumber)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transfer(address _to, uint256 _amount) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    //Test Functions\\n    function theLazyCoon(address _address, uint256 _amount) external;\\n\\n    function testSubmitMiningSolution(\\n        string calldata _nonce,\\n        uint256[5] calldata _requestId,\\n        uint256[5] calldata _value\\n    ) external;\\n\\n    function manuallySetDifficulty(uint256 _diff) external;\\n\\n    function testgetMax5(uint256[51] memory requests)\\n        external\\n        view\\n        returns (uint256[5] memory _max, uint256[5] memory _index);\\n}\\n\",\"keccak256\":\"0x4b63ef3eab15c2c189df4a76bb9f8e7e0822bbd22b7fa666470a0c41bb5e8d35\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102695760003560e01c8063704b6c0211610151578063b4eae1cb116100c3578063c98c05b711610087578063c98c05b7146106f6578063ca628c7814610714578063dd62ed3e1461071e578063e8d8a2551461074e578063f06b46581461077e578063f851a4401461079a57610269565b8063b4eae1cb14610666578063b8eb5e4b14610684578063b93e0cb5146106a2578063b9d3d6e3146106be578063bad4a01f146106da57610269565b806395d89b411161011557806395d89b4114610592578063a140ae23146105b0578063a457c2d7146105cc578063a8d49e64146105fc578063a9059cbb14610618578063b2016bd41461064857610269565b8063704b6c02146104ec57806370a08231146105085780637ff9b596146105385780638e8cfbde146105565780639014de631461057457610269565b806339509351116101ea5780635891de72116101ae5780635891de721461044e57806359825a4c1461046c5780636112fe2e1461047657806364494074146104925780636479a566146104b05780636a146024146104ce57610269565b806339509351146103a8578063401ce372146103d857806348500ccf146103f45780634adbe55114610412578063552033c41461043057610269565b806323b872dd1161023157806323b872dd1461031457806328a070251461034457806329a150ba1461034e578063313ce5671461036c57806334a5e10b1461038a57610269565b806306fdde031461026e57806307da28b71461028c578063095ea7b3146102a85780631527262b146102d857806318160ddd146102f6575b600080fd5b6102766107b8565b604051610283919061413b565b60405180910390f35b6102a660048036038101906102a19190613a5b565b61084a565b005b6102c260048036038101906102bd9190613a5b565b61095b565b6040516102cf9190614105565b60405180910390f35b6102e0610972565b6040516102ed9190613fc9565b60405180910390f35b6102fe610998565b60405161030b91906144fd565b60405180910390f35b61032e60048036038101906103299190613a0c565b6109a2565b60405161033b9190614105565b60405180910390f35b61034c610a4c565b005b610356610e20565b60405161036391906144fd565b60405180910390f35b610374610e26565b6040516103819190614541565b60405180910390f35b610392610e3d565b60405161039f9190614105565b60405180910390f35b6103c260048036038101906103bd9190613a5b565b610e50565b6040516103cf9190614105565b60405180910390f35b6103f260048036038101906103ed9190613ac0565b610eee565b005b6103fc611018565b60405161040991906144fd565b60405180910390f35b61041a61101e565b6040516104279190613fc9565b60405180910390f35b610438611044565b60405161044591906144fd565b60405180910390f35b610456611054565b60405161046391906144fd565b60405180910390f35b6104746110db565b005b610490600480360381019061048b9190613ac0565b6111a4565b005b61049a6113b1565b6040516104a791906144fd565b60405180910390f35b6104b86113b7565b6040516104c591906144fd565b60405180910390f35b6104d66113bd565b6040516104e391906144fd565b60405180910390f35b610506600480360381019061050191906139a7565b6113c9565b005b610522600480360381019061051d91906139a7565b611544565b60405161052f91906144fd565b60405180910390f35b61054061158d565b60405161054d91906144fd565b60405180910390f35b61055e6115b0565b60405161056b91906144fd565b60405180910390f35b61057c6115b6565b60405161058991906144fd565b60405180910390f35b61059a6115bc565b6040516105a7919061413b565b60405180910390f35b6105ca60048036038101906105c59190613b12565b61164e565b005b6105e660048036038101906105e19190613a5b565b61177a565b6040516105f39190614105565b60405180910390f35b610616600480360381019061061191906139a7565b611818565b005b610632600480360381019061062d9190613a5b565b611993565b60405161063f9190614105565b60405180910390f35b6106506119aa565b60405161065d9190614120565b60405180910390f35b61066e6119d0565b60405161067b91906144fd565b60405180910390f35b61068c611b19565b60405161069991906144fd565b60405180910390f35b6106bc60048036038101906106b79190613ac0565b611b1f565b005b6106d860048036038101906106d39190613ac0565b611bf0565b005b6106f460048036038101906106ef9190613ac0565b611d53565b005b6106fe611f19565b60405161070b91906144fd565b60405180910390f35b61071c611fcb565b005b610738600480360381019061073391906139d0565b612304565b60405161074591906144fd565b60405180910390f35b610768600480360381019061076391906139a7565b61238b565b60405161077591906144fd565b60405180910390f35b61079860048036038101906107939190613ac0565b6123a3565b005b6107a26124e1565b6040516107af9190613fc9565b60405180910390f35b6060600680546107c790614739565b80601f01602080910402602001604051908101604052809291908181526020018280546107f390614739565b80156108405780601f1061081557610100808354040283529160200191610840565b820191906000526020600020905b81548152906001019060200180831161082357829003601f168201915b5050505050905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d1906142dd565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fc3837f973800685e86828b9ee70e448dee134a698f634c94be8e1f2435967873828260405161094f92919061401b565b60405180910390a15050565b6000610968338484612507565b6001905092915050565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b60006109af8484846126d2565b610a41843384600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a3c9190614659565b612507565b600190509392505050565b600d54610a576119d0565b11610a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8e9061419d565b60405180910390fd5b6000610aa233611544565b11610ae2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad99061423d565b60405180910390fd5b6000610b9f600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b429190613fc9565b60206040518083038186803b158015610b5a57600080fd5b505afa158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b929190613ae9565b610b9a610998565b612adb565b90506000610bac33611544565b90506000610bba8284612b17565b90506000610bca82600f54612b17565b90507f158ba9ab7bbbd08eeffa4753bad41f4d450e24831d293427308badf3eadd8c7633848484604051610c0194939291906140c0565b60405180910390a1610c133384612b5b565b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33610c5c8585612cd7565b6040518363ffffffff1660e01b8152600401610c7992919061401b565b602060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccb9190613a97565b610d0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d019061447d565b60405180910390fd5b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610d8992919061401b565b602060405180830381600087803b158015610da357600080fd5b505af1158015610db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddb9190613a97565b610e1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e119061431d565b60405180910390fd5b50505050565b600f5481565b6000600860009054906101000a900460ff16905090565b600360149054906101000a900460ff1681565b6000610ee4338484600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610edf9190614578565b612507565b6001905092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f759061429d565b60405180910390fd5b80600081118015610f97575068056bc75e2d6310000081105b610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd906143dd565b60405180910390fd5b81600d819055507f28e98951093a92e2a12cfccced98a5e14ff4a69f23c1137a90353ea343a879d58260405161100c91906144fd565b60405180910390a15050565b600c5481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6b033b2e3c9fd0803ce800000081565b6000806000611072600b54600e544261106d9190614659565b612d30565b5091509150816110b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ae9061433d565b60405180910390fd5b6110d4816110cf670de0b6b3a7640000600c54612eeb565b612f35565b9250505090565b6000601154426110eb9190614659565b905060008111611130576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611127906142bd565b60405180910390fd5b42601181905550611146600a5460105483612fa2565b600a81905550600061117261116561115c610998565b60105485612fc0565b61116d610998565b612cd7565b90506111a0601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682612fde565b5050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122b9061429d565b60405180910390fd5b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161129192919061401b565b602060405180830381600087803b1580156112ab57600080fd5b505af11580156112bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e39190613a97565b611322576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113199061449d565b60405180910390fd5b600061132c6119d0565b9050600d548110611372576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611369906141bd565b60405180910390fd5b7f627a692d5a03ab34732c0d2aa319f3ecdebdc4528f383eabcb25441dc0a70cfb3383836040516113a593929190614089565b60405180910390a15050565b60105481565b600e5481565b670de0b6b3a764000081565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611459576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114509061429d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c0906144dd565b60405180910390fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c816040516115399190613fc9565b60405180910390a150565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006115ab600a54601054601154426115a69190614659565b612fa2565b905090565b600d5481565b60115481565b6060600780546115cb90614739565b80601f01602080910402602001604051908101604052809291908181526020018280546115f790614739565b80156116445780601f1061161957610100808354040283529160200191611644565b820191906000526020600020905b81548152906001019060200180831161162757829003601f168201915b5050505050905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d59061429d565b60405180910390fd5b6116e88183612fde565b60006116f26119d0565b9050600d548110611738576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172f906141bd565b60405180910390fd5b7f8aa79244595326e02b94ff370fec2bf34048b114fa3566a1928de6961944b6c43384848460405161176d9493929190614044565b60405180910390a1505050565b600061180e338484600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118099190614659565b612507565b6001905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189f906142dd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190f906144dd565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f68e2d4cfa0a40c3abfa7153a966c187b03e893a7e358a5cd4de067e7e3da5240816040516119889190613fc9565b60405180910390a150565b60006119a03384846126d2565b6001905092915050565b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a2e9190613fc9565b60206040518083038186803b158015611a4657600080fd5b505afa158015611a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7e9190613ae9565b90506000611a8a610998565b1480611a965750600081145b15611aa5576000915050611b16565b6000611ab8611ab2611054565b83612b17565b90506000611add611ac7610998565b60105460115442611ad89190614659565b612fc0565b90506000611af2611aec61158d565b83612b17565b9050611b0f670de0b6b3a7640000611b0a8386612adb565b61323c565b9450505050505b90565b600b5481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba69061429d565b60405180910390fd5b80600e819055507ff446a856a251d3949a294b9b5a1887d32750b34a18bb135814cfc300119ca84d81604051611be591906144fd565b60405180910390a150565b60008111611c33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2a9061441d565b60405180910390fd5b80611c3d33611544565b1015611c7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c759061427d565b60405180910390fd5b42601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555080601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550611d173330836126d2565b7f775018a2778ce1872c0e8479c44904756ec55daa3afe7fc35951cea8ef67126b3382604051611d4892919061401b565b60405180910390a150565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dda9061429d565b60405180910390fd5b60008111611e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1d9061435d565b60405180910390fd5b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611e8593929190613fe4565b602060405180830381600087803b158015611e9f57600080fd5b505af1158015611eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed79190613a97565b611f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0d9061437d565b60405180910390fd5b50565b6000600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611f769190613fc9565b60206040518083038186803b158015611f8e57600080fd5b505afa158015611fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc69190613ae9565b905090565b6000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050600081116120b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ae9061441d565b60405180910390fd5b600060056120c3610998565b8360646120d091906145ff565b6120da91906145ce565b6120e491906145ce565b60016120f09190614578565b9050806201518061210191906145ff565b8360200151426121119190614659565b1015612152576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612149906142fd565b60405180910390fd5b6000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060006121a4611054565b905060006121b96121b361158d565b83612adb565b905060006121c78286612b17565b90506121d33086612b5b565b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161223092919061401b565b602060405180830381600087803b15801561224a57600080fd5b505af115801561225e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122829190613a97565b6122c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b89061421d565b60405180910390fd5b7f7575c9e41ba6d91ef21e39bd62b5b9df62fc9b0401379fdf9fe1fa372f41e7c13386836040516122f493929190614089565b60405180910390a1505050505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60046020528060005260406000206000915090505481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242a9061429d565b60405180910390fd5b8060008111801561244c575068056bc75e2d6310000081105b61248b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612482906143dd565b60405180910390fd5b61249e8268056bc75e2d63100000612adb565b600f819055507fb410b9fb1c7ee253f64b4393c5fa78a4d64c9f4495828b8c9e62813a5c53528d600f546040516124d591906144fd565b60405180910390a15050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256e9061443d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156125e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125de906141dd565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516126c591906144fd565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612742576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612739906143fd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156127b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a99061417d565b60405180910390fd5b600360149054906101000a900460ff161561295557600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128529190614578565b1115612893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288a9061439d565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115612954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294b9061445d565b60405180910390fd5b5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546129a09190614659565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2e9190614578565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612ace91906144fd565b60405180910390a3505050565b600081612b05612af385670de0b6b3a7640000612f35565b600285612b0091906145ce565b61323c565b612b0f91906145ce565b905092915050565b6000670de0b6b3a7640000612b49612b2f8585612f35565b6002670de0b6b3a7640000612b4491906145ce565b61323c565b612b5391906145ce565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612bcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc2906143bd565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c169190614659565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600554612c679190614659565b600581905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612ccb91906144fd565b60405180910390a35050565b6000828284612ce69190614659565b9150811115612d2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d219061415d565b60405180910390fd5b92915050565b6000806000806000612d428787613295565b9150915081612d5d5760008060009450945094505050612ee4565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377fbb66389846040518363ffffffff1660e01b8152600401612dbb929190614518565b60206040518083038186803b158015612dd357600080fd5b505afa158015612de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0b9190613ae9565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393fa491589836040518363ffffffff1660e01b8152600401612e68929190614518565b60206040518083038186803b158015612e8057600080fd5b505afa158015612e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb89190613ae9565b94506000851115612ed55760018582955095509550505050612ee4565b60008060009550955095505050505b9250925092565b6000612f2d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506137d9565b905092915050565b600080821480612f5d575082828385612f4e91906145ff565b925082612f5b91906145ce565b145b612f9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f93906141fd565b60405180910390fd5b92915050565b6000612fb784612fb2858561383c565b6138c7565b90509392505050565b6000612fd584612fd0858561383c565b613907565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561304e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613045906144bd565b60405180910390fd5b600360149054906101000a900460ff161561313057600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546130ee9190614578565b111561312f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131269061439d565b60405180910390fd5b5b8060055461313e9190614578565b60058190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461318f9190614578565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161323091906144fd565b60405180910390a35050565b600082828461324b9190614578565b915081101561328f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132869061425d565b60405180910390fd5b92915050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166346eee1c4866040518263ffffffff1660e01b81526004016132f491906144fd565b60206040518083038186803b15801561330c57600080fd5b505afa158015613320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133449190613ae9565b905060008111156137c9576000806000905060006001846133659190614659565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377fbb6638a856040518363ffffffff1660e01b81526004016133c5929190614518565b60206040518083038186803b1580156133dd57600080fd5b505afa1580156133f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134159190613ae9565b905087811061342f576000809650965050505050506137d2565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377fbb6638a846040518363ffffffff1660e01b815260040161348a929190614518565b60206040518083038186803b1580156134a257600080fd5b505afa1580156134b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134da9190613ae9565b9050878110156134f5576001829650965050505050506137d2565b5b6001156137c4578260016002858561350e9190614659565b61351891906145ce565b6135229190614578565b61352c9190614578565b935060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377fbb6638a866040518363ffffffff1660e01b8152600401613589929190614518565b60206040518083038186803b1580156135a157600080fd5b505afa1580156135b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d99190613ae9565b9050878110156136cd5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377fbb6638b6001886136309190614578565b6040518363ffffffff1660e01b815260040161364d929190614518565b60206040518083038186803b15801561366557600080fd5b505afa158015613679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369d9190613ae9565b90508881106136b857600185975097505050505050506137d2565b6001856136c59190614578565b9350506137bf565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377fbb6638b60018861371a9190614659565b6040518363ffffffff1660e01b8152600401613737929190614518565b60206040518083038186803b15801561374f57600080fd5b505afa158015613763573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137879190613ae9565b9050888110156137ae576001808661379f9190614659565b975097505050505050506137d2565b6001856137bb9190614659565b9250505b6134f6565b505050505b60008092509250505b9250929050565b60008083118290613820576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613817919061413b565b60405180910390fd5b506000838561382f91906145ce565b9050809150509392505050565b60008060028361384c919061476b565b1415613864576b033b2e3c9fd0803ce8000000613866565b825b905060028261387591906145ce565b91505b600082146138c15761388a8384613907565b9250600060028361389b919061476b565b146138ad576138aa8184613907565b90505b6002826138ba91906145ce565b9150613878565b92915050565b6000816138f56138e3856b033b2e3c9fd0803ce8000000612f35565b6002856138f091906145ce565b61323c565b6138ff91906145ce565b905092915050565b60006b033b2e3c9fd0803ce80000006139416139238585612f35565b60026b033b2e3c9fd0803ce800000061393c91906145ce565b61323c565b61394b91906145ce565b905092915050565b60008135905061396281614ecd565b92915050565b60008151905061397781614ee4565b92915050565b60008135905061398c81614efb565b92915050565b6000815190506139a181614efb565b92915050565b6000602082840312156139b957600080fd5b60006139c784828501613953565b91505092915050565b600080604083850312156139e357600080fd5b60006139f185828601613953565b9250506020613a0285828601613953565b9150509250929050565b600080600060608486031215613a2157600080fd5b6000613a2f86828701613953565b9350506020613a4086828701613953565b9250506040613a518682870161397d565b9150509250925092565b60008060408385031215613a6e57600080fd5b6000613a7c85828601613953565b9250506020613a8d8582860161397d565b9150509250929050565b600060208284031215613aa957600080fd5b6000613ab784828501613968565b91505092915050565b600060208284031215613ad257600080fd5b6000613ae08482850161397d565b91505092915050565b600060208284031215613afb57600080fd5b6000613b0984828501613992565b91505092915050565b60008060408385031215613b2557600080fd5b6000613b338582860161397d565b9250506020613b4485828601613953565b9150509250929050565b613b578161468d565b82525050565b613b668161469f565b82525050565b613b75816146e2565b82525050565b6000613b868261455c565b613b908185614567565b9350613ba0818560208601614706565b613ba981614829565b840191505092915050565b6000613bc1601583614567565b9150613bcc8261483a565b602082019050919050565b6000613be4602383614567565b9150613bef82614863565b604082019050919050565b6000613c07602983614567565b9150613c12826148b2565b604082019050919050565b6000613c2a602a83614567565b9150613c3582614901565b604082019050919050565b6000613c4d602283614567565b9150613c5882614950565b604082019050919050565b6000613c70601483614567565b9150613c7b8261499f565b602082019050919050565b6000613c93601883614567565b9150613c9e826149c8565b602082019050919050565b6000613cb6602183614567565b9150613cc1826149f1565b604082019050919050565b6000613cd9601483614567565b9150613ce482614a40565b602082019050919050565b6000613cfc601283614567565b9150613d0782614a69565b602082019050919050565b6000613d1f600c83614567565b9150613d2a82614a92565b602082019050919050565b6000613d42601983614567565b9150613d4d82614abb565b602082019050919050565b6000613d65601783614567565b9150613d7082614ae4565b602082019050919050565b6000613d88601583614567565b9150613d9382614b0d565b602082019050919050565b6000613dab602d83614567565b9150613db682614b36565b604082019050919050565b6000613dce601483614567565b9150613dd982614b85565b602082019050919050565b6000613df1601083614567565b9150613dfc82614bae565b602082019050919050565b6000613e14602283614567565b9150613e1f82614bd7565b604082019050919050565b6000613e37602483614567565b9150613e4282614c26565b604082019050919050565b6000613e5a602183614567565b9150613e6582614c75565b604082019050919050565b6000613e7d601f83614567565b9150613e8882614cc4565b602082019050919050565b6000613ea0602583614567565b9150613eab82614ced565b604082019050919050565b6000613ec3601f83614567565b9150613ece82614d3c565b602082019050919050565b6000613ee6602483614567565b9150613ef182614d65565b604082019050919050565b6000613f09602183614567565b9150613f1482614db4565b604082019050919050565b6000613f2c602583614567565b9150613f3782614e03565b604082019050919050565b6000613f4f601983614567565b9150613f5a82614e52565b602082019050919050565b6000613f72601f83614567565b9150613f7d82614e7b565b602082019050919050565b6000613f95601f83614567565b9150613fa082614ea4565b602082019050919050565b613fb4816146cb565b82525050565b613fc3816146d5565b82525050565b6000602082019050613fde6000830184613b4e565b92915050565b6000606082019050613ff96000830186613b4e565b6140066020830185613b4e565b6140136040830184613fab565b949350505050565b60006040820190506140306000830185613b4e565b61403d6020830184613fab565b9392505050565b60006080820190506140596000830187613b4e565b6140666020830186613fab565b6140736040830185613b4e565b6140806060830184613fab565b95945050505050565b600060608201905061409e6000830186613b4e565b6140ab6020830185613fab565b6140b86040830184613fab565b949350505050565b60006080820190506140d56000830187613b4e565b6140e26020830186613fab565b6140ef6040830185613fab565b6140fc6060830184613fab565b95945050505050565b600060208201905061411a6000830184613b5d565b92915050565b60006020820190506141356000830184613b6c565b92915050565b600060208201905081810360008301526141558184613b7b565b905092915050565b6000602082019050818103600083015261417681613bb4565b9050919050565b6000602082019050818103600083015261419681613bd7565b9050919050565b600060208201905081810360008301526141b681613bfa565b9050919050565b600060208201905081810360008301526141d681613c1d565b9050919050565b600060208201905081810360008301526141f681613c40565b9050919050565b6000602082019050818103600083015261421681613c63565b9050919050565b6000602082019050818103600083015261423681613c86565b9050919050565b6000602082019050818103600083015261425681613ca9565b9050919050565b6000602082019050818103600083015261427681613ccc565b9050919050565b6000602082019050818103600083015261429681613cef565b9050919050565b600060208201905081810360008301526142b681613d12565b9050919050565b600060208201905081810360008301526142d681613d35565b9050919050565b600060208201905081810360008301526142f681613d58565b9050919050565b6000602082019050818103600083015261431681613d7b565b9050919050565b6000602082019050818103600083015261433681613d9e565b9050919050565b6000602082019050818103600083015261435681613dc1565b9050919050565b6000602082019050818103600083015261437681613de4565b9050919050565b6000602082019050818103600083015261439681613e07565b9050919050565b600060208201905081810360008301526143b681613e2a565b9050919050565b600060208201905081810360008301526143d681613e4d565b9050919050565b600060208201905081810360008301526143f681613e70565b9050919050565b6000602082019050818103600083015261441681613e93565b9050919050565b6000602082019050818103600083015261443681613eb6565b9050919050565b6000602082019050818103600083015261445681613ed9565b9050919050565b6000602082019050818103600083015261447681613efc565b9050919050565b6000602082019050818103600083015261449681613f1f565b9050919050565b600060208201905081810360008301526144b681613f42565b9050919050565b600060208201905081810360008301526144d681613f65565b9050919050565b600060208201905081810360008301526144f681613f88565b9050919050565b60006020820190506145126000830184613fab565b92915050565b600060408201905061452d6000830185613fab565b61453a6020830184613fab565b9392505050565b60006020820190506145566000830184613fba565b92915050565b600081519050919050565b600082825260208201905092915050565b6000614583826146cb565b915061458e836146cb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156145c3576145c261479c565b5b828201905092915050565b60006145d9826146cb565b91506145e4836146cb565b9250826145f4576145f36147cb565b5b828204905092915050565b600061460a826146cb565b9150614615836146cb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561464e5761464d61479c565b5b828202905092915050565b6000614664826146cb565b915061466f836146cb565b9250828210156146825761468161479c565b5b828203905092915050565b6000614698826146ab565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006146ed826146f4565b9050919050565b60006146ff826146ab565b9050919050565b60005b83811015614724578082015181840152602081019050614709565b83811115614733576000848401525b50505050565b6000600282049050600182168061475157607f821691505b60208210811415614765576147646147fa565b5b50919050565b6000614776826146cb565b9150614781836146cb565b925082614791576147906147cb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f636f6c6c61746572616c207574696c697a61746f696e2069732062656c6f772060008201527f7468726573686f6c640000000000000000000000000000000000000000000000602082015250565b7f636f6c6c61746572616c207574696c697a6174696f6e2061626f76652074686560008201527f207468726573686f6c6400000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000600082015250565b7f636f6c6c61746572616c207472616e73666572206661696c0000000000000000600082015250565b7f6d73672073656e64657220646f65736e2774206f776e20616e7920746f6b656e60008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000600082015250565b7f6e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b7f6e6f7420616e2061646d696e0000000000000000000000000000000000000000600082015250565b7f6e6f20696e666c6174696f6e20696e6372656173652079657400000000000000600082015250565b7f6e6f74207468652077686974656c6973742061646d696e000000000000000000600082015250565b7f6d757374207761697420746f2077697468647261770000000000000000000000600082015250565b7f636f6c6c61746572616c206c69717569646174696f6e2070656e616c7479207460008201527f72616e73666572206661696c7300000000000000000000000000000000000000602082015250565b7f67657474696e67206f7261636c65207072696365000000000000000000000000600082015250565b7f6465706f73697420616d6f756e74203000000000000000000000000000000000600082015250565b7f6661696c656420636f6c6c61746572616c206465706f736974207472616e736660008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b7f726563697069656e74206e6f742077686974656c697374656420666f7220616d60008201527f6f756e7400000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f76616c7565206e6f742077697468696e20616c6c6f776564206c696d69747300600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f616d6f756e742073686f756c642062652067726561746572207468616e203000600082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f73656e646572206e6f742077686974656c697374656420666f7220616d6f756e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b7f636f6c6c61746572616c206c69717569646174696f6e207472616e736665722060008201527f6661696c73000000000000000000000000000000000000000000000000000000602082015250565b7f636f6c6c61746572616c207472616e73666572206661696c7300000000000000600082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b7f63616e6e6f742073656e6420746f20746865207a65726f206164647265737300600082015250565b614ed68161468d565b8114614ee157600080fd5b50565b614eed8161469f565b8114614ef857600080fd5b50565b614f04816146cb565b8114614f0f57600080fd5b5056fea26469706673582212203506c37330ed397cbd11ba39d37cc6c2759ce72738460973315f961aa6bdbda564736f6c63430008030033",
  "devdoc": {
    "author": "Tellor Inc.",
    "details": "Chorus is a structure for issuing semi-stablecoins as community currencies*",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "collateralBalance()": {
        "details": "Returns the current token price in USD reduced by the current inflation.",
        "returns": {
          "_0": "uint256 token price"
        }
      },
      "collateralPrice()": {
        "details": "Checks the Tellor oracle and gets the collateral price",
        "returns": {
          "_0": "uint256 collateral price in USD upscaled to e18 precision."
        }
      },
      "collateralRatio()": {
        "details": "A view funciton to look at the collateralization of the system",
        "returns": {
          "_0": "uint256 collateral token balance of this address / totalSupply"
        }
      },
      "constructor": {
        "details": "This is the constructor, sets the inital paramaters in the system The parameters include, the Tellor Address, collateral token's address, collateral token's requestID, the price granualrity, the token name,  token's symbol, inflation rate per year, and the inflation beneficiary "
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "depositCollateral(uint256)": {
        "details": "Allows the admin to deposit collateral",
        "params": {
          "_amount": "the amount of collateral token to deposit"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "liquidate()": {
        "details": "Function to allow anyone to liquidate the system if it is undercollateralized"
      },
      "mintToken(uint256,address)": {
        "details": "Allows the admin to mint tokens up to the collateral threshold",
        "params": {
          "_amount": "the amount of collateral tokens to mint",
          "_to": "the address to mint them to;"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "requestWithdrawToken(uint256)": {
        "details": "Allows a user to request to withdraw tokens",
        "params": {
          "_amount": "the amount of tokens to withdraw"
        }
      },
      "setAdmin(address)": {
        "details": "Allows the user to set a new admin address",
        "params": {
          "_newAdmin": "the address of the new admin address"
        }
      },
      "setCollateralPriceAge(uint256)": {
        "details": "Allows the admin to set the collateral price Age (delay in feed from Tellor)",
        "params": {
          "_amount": "the amount of delay in the price feed (we want to wait for disputes)"
        }
      },
      "setCollateralThreshold(uint256)": {
        "details": "Allows the admin to set the Collateral threshold",
        "params": {
          "_amount": "new collateral threshold"
        }
      },
      "setLiquidationPenatly(uint256)": {
        "details": "Allows the admin to set the liquidation penalty",
        "params": {
          "_amount": "the amount of the liquidation penalty"
        }
      },
      "setWhitelistAdmin(address)": {
        "details": "Allows the user to set a new admin address",
        "params": {
          "_newAdmin": "the address of the new admin address"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "tokenPrice()": {
        "details": "Returns the current token price in USD reduced by the current inflation.",
        "returns": {
          "_0": "uint256 token price"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "updateInflation()": {
        "details": "Function to reduce token price by the inflation rate, increases the total supply by the inflation rate and sends the new tokens to the inflation beneficiary."
      },
      "withdrawCollateral(uint256)": {
        "details": "Allows the admin to withdraw collateral above the threshold",
        "params": {
          "_amount": "the amount of collateral token to deposit"
        }
      },
      "withdrawToken()": {
        "details": "Allows a user to withdraw tokens"
      }
    },
    "title": "Chorus",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1886,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "tellor",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITellor)2745"
      },
      {
        "astId": 857,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 863,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 865,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "whitelistAdmin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 867,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "isWhitelistedSystem",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 871,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "whitelistedAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 873,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 875,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "_name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 877,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 879,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "_decimals",
        "offset": 0,
        "slot": "8",
        "type": "t_uint8"
      },
      {
        "astId": 78,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "collateralToken",
        "offset": 1,
        "slot": "8",
        "type": "t_contract(ERC20)1427"
      },
      {
        "astId": 82,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "admin",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 85,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "tknPrice",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 87,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "collateralID",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 89,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "collateralPriceGranularity",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 92,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "collateralThreshold",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 95,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "collateralPriceAge",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 98,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "liquidationPenatly",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 100,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "inflRatePerSec",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 104,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "inflLastUpdate",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 106,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "inflBeneficiary",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 111,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "withdrawRequested",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(WithdrawDetails)75_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)1427": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITellor)2745": {
        "encoding": "inplace",
        "label": "contract ITellor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(WithdrawDetails)75_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Chorus.WithdrawDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(WithdrawDetails)75_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(WithdrawDetails)75_storage": {
        "encoding": "inplace",
        "label": "struct Chorus.WithdrawDetails",
        "members": [
          {
            "astId": 72,
            "contract": "contracts/Chorus.sol:Chorus",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 74,
            "contract": "contracts/Chorus.sol:Chorus",
            "label": "requestDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}